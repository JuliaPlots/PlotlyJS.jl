var documenterSearchIndex = {"docs":
[{"location":"examples/maps/#Maps","page":"Maps","title":"Maps","text":"","category":"section"},{"location":"examples/maps/","page":"Maps","title":"Maps","text":"using PlotlyJS, DataFrames, CSV","category":"page"},{"location":"examples/maps/","page":"Maps","title":"Maps","text":"function maps1()\n    marker = attr(size=[20, 30, 15, 10],\n                  color=[10, 20, 40, 50],\n                  cmin=0,\n                  cmax=50,\n                  colorscale=\"Greens\",\n                  colorbar=attr(title=\"Some rate\",\n                                ticksuffix=\"%\",\n                                showticksuffix=\"last\"),\n                  line_color=\"black\")\n    trace = scattergeo(;mode=\"markers\", locations=[\"FRA\", \"DEU\", \"RUS\", \"ESP\"],\n                        marker=marker, name=\"Europe Data\")\n    layout = Layout(geo_scope=\"europe\", geo_resolution=50, width=500, height=550,\n                    margin=attr(l=0, r=0, t=10, b=0))\n    plot(trace, layout)\nend\nmaps1()","category":"page"},{"location":"examples/maps/","page":"Maps","title":"Maps","text":"function maps2()\n    # read Data into dataframe\n    nm = tempname()\n    url = \"https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv\"\n    download(url, nm)\n    df = CSV.read(nm)\n    rm(nm)\n\n    trace = scattergeo(;locationmode=\"USA-states\",\n                        lat=df[:lat],\n                        lon=df[:lon],\n                        hoverinfo=\"text\",\n                        text=[string(x[:name], \" pop: \", x[:pop]) for x in eachrow(df)],\n                        marker_size=df[:pop]/50_000,\n                        marker_line_color=\"black\", marker_line_width=2)\n    geo = attr(scope=\"usa\",\n               projection_type=\"albers usa\",\n               showland=true,\n               landcolor=\"rgb(217, 217, 217)\",\n               subunitwidth=1,\n               countrywidth=1,\n               subunitcolor=\"rgb(255,255,255)\",\n               countrycolor=\"rgb(255,255,255)\")\n\n    layout = Layout(;title=\"2014 US City Populations\", showlegend=false, geo=geo)\n    plot(trace, layout)\nend\nmaps2()","category":"page"},{"location":"examples/ternary/#Ternary","page":"Ternary","title":"Ternary","text":"","category":"section"},{"location":"examples/ternary/","page":"Ternary","title":"Ternary","text":"using PlotlyJS, JSON","category":"page"},{"location":"examples/ternary/","page":"Ternary","title":"Ternary","text":"function ternary_markers()\n    function make_ax(title, tickangle)\n        attr(title=title, titlefont_size=20, tickangle=tickangle,\n            tickfont_size=15, tickcolor=\"rgba(0, 0, 0, 0)\", ticklen=5,\n            showline=true, showgrid=true)\n    end\n\n    raw_data = [\n        Dict(:journalist=>75, :developer=>:25, :designer=>0, :label=>\"point 1\"),\n        Dict(:journalist=>70, :developer=>:10, :designer=>20, :label=>\"point 2\"),\n        Dict(:journalist=>75, :developer=>:20, :designer=>5, :label=>\"point 3\"),\n        Dict(:journalist=>5, :developer=>:60, :designer=>35, :label=>\"point 4\"),\n        Dict(:journalist=>10, :developer=>:80, :designer=>10, :label=>\"point 5\"),\n        Dict(:journalist=>10, :developer=>:90, :designer=>0, :label=>\"point 6\"),\n        Dict(:journalist=>20, :developer=>:70, :designer=>10, :label=>\"point 7\"),\n        Dict(:journalist=>10, :developer=>:20, :designer=>70, :label=>\"point 8\"),\n        Dict(:journalist=>15, :developer=>:5, :designer=>80, :label=>\"point 9\"),\n        Dict(:journalist=>10, :developer=>:10, :designer=>80, :label=>\"point 10\"),\n        Dict(:journalist=>20, :developer=>:10, :designer=>70, :label=>\"point 11\")\n    ]\n\n    t = scatterternary(\n        mode=\"markers\",\n        a=[_x[:journalist] for _x in raw_data],\n        b=[_x[:developer] for _x in raw_data],\n        c=[_x[:designer] for _x in raw_data],\n        text=[_x[:label] for _x in raw_data],\n        marker=attr(symbol=100, color=\"#DB7365\", size=14, line_width=2)\n    )\n    layout = Layout(\n        ternary=attr(\n            sum=100,\n            aaxis=make_ax(\"Journalist\", 0),\n            baxis=make_ax(\"Developer\", 45),\n            caxis=make_ax(\"Designer\", -45),\n            bgcolor=\"#fff1e0\",\n        ), annotations=attr(\n            showarrow=false,\n            text=\"Replica of Tom Pearson's block\",\n            x=1.0, y=1.3, font_size=15\n        ),\n        paper_bgcolor=\"#fff1e0\"\n    )\n    plot(t, layout)\nend\nternary_markers()","category":"page"},{"location":"examples/ternary/","page":"Ternary","title":"Ternary","text":"function filled_ternary()\n    function make_ax(title)\n        attr(\n            title=title,\n            ticksuffix=\"%\",\n            min=0.01,\n            linewidth=2,\n            ticks=\"outside\",\n            ticklen=8,\n            showgrid=true\n        )\n    end\n\n    fn = tempname()\n    download(\"https://gist.githubusercontent.com/davenquinn/988167471993bc2ece29/raw/f38d9cb3dd86e315e237fde5d65e185c39c931c2/data.json\", fn)\n    raw_data = JSON.parsefile(fn)\n    rm(fn)\n\n    colors = [\n        \"#8dd3c7\",\n        \"#ffffb3\",\n        \"#bebada\",\n        \"#fb8072\",\n        \"#80b1d3\",\n        \"#fdb462\",\n        \"#b3de69\",\n        \"#fccde5\",\n        \"#d9d9d9\",\n        \"#bc80bd\",\n        \"#ccebc5\",\n        \"#ffed6f\"\n    ]\n\n    traces = Array{GenericTrace,1}(undef, length(raw_data))\n    for (i, (k, v)) in enumerate(raw_data)\n        traces[i] = scatterternary(mode=\"lines\", name=k,\n            a=[_x[\"clay\"] for _x in v],\n            b=[_x[\"sand\"] for _x in v],\n            c=[_x[\"silt\"] for _x in v],\n            line_color=\"#444\",\n            fill=\"toself\",\n            fillcolor=colors[i],\n            hoveron=\"fills+points\"\n        )\n    end\n    layout = Layout(\n        ternary=attr(\n            sum=100,\n            aaxis=make_ax(\"Clay\"),\n            baxis=make_ax(\"Sand\"),\n            caxis=make_ax(\"Slit\")),\n        showlegend=false,\n        width=700,\n        annotations=[attr(\n            showarrow=false, x=0.15, y=1.1, text=\"Soil types fill plot\"\n        )]\n    )\n    plot(traces, layout)\nend\nfilled_ternary()","category":"page"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Contributions are welcome! For a quick list at the things on our radar, check out the issue list.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If submitting pull requests on GitHub is intimidating, we're happy to help you work through getting your code polished up and included in the right places.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Other projects that are helpful are:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Adding docstrings to function names\nAdding more examples to the documentation (see below)\nSubmitting feature requests or bug reports","category":"page"},{"location":"contributing/#Documentation","page":"Contributing","title":"Documentation","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The documentation for PlotlyJS.jl is contained in the docs directory of this repository.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Docs are build using the Documenter.jl package and can be built following these steps:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Change into the docs directory\nStart julia\nActivate the docs project by entering package mode (]) and then running activate .\nExecute include(\"make.jl\") from the Julia prompt","category":"page"},{"location":"contributing/#Adding-Examples","page":"Contributing","title":"Adding Examples","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"tl;dr: adding examples to the docs is as easy as 1, 2, 3...","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Add a new function that returns a SyncPlot to a Julia (.jl) file in the examples directory\nRun the Julia script docs/build_example_docs.jl to re-generate the markdown source for the examples section of the docs\nRebuild the site using one of the instructions above","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"One of the most helpful things users can do to contribute to the documentation is to add more examples. These are automatically generated from the Julia (.jl) files in the examples directory. To add a new example, you simply need to open one of the files in that directory and add a new 0 argument function that constructs and returns a SyncPlot object (this is the output of the plot function).","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"For example, if we wanted to add an example of a scatter plot of the sin function we could add the following function definition inside the examples/line_scatter.jl file:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"function sin_scatter()\n    x = range(0, stop=2*pi, length=50)\n    y = sin(x)\n    plot(scatter(x=x, y=y, marker_symbol=\"line-nw\", mode=\"markers+symbols\"))\nend","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The next step is to have Julia re-build the markdown (.md) files in docs/examples to use all your new functions in the Julia files from the examples folder. To do this run the script docs/build_example_docs.jl. If I were in the root directory of the repository, I could do this by running julia docs/build_example_docs.jl.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The final step is to build the docs again using one of the commands from above.","category":"page"},{"location":"basics/#Basics","page":"Preliminaries","title":"Basics","text":"","category":"section"},{"location":"basics/","page":"Preliminaries","title":"Preliminaries","text":"[plotly.js][_plotlyjs] figures are constructed by calling the function:","category":"page"},{"location":"basics/","page":"Preliminaries","title":"Preliminaries","text":"Plotly.newPlot(graphdiv, data, layout)","category":"page"},{"location":"basics/","page":"Preliminaries","title":"Preliminaries","text":"where","category":"page"},{"location":"basics/","page":"Preliminaries","title":"Preliminaries","text":"graphdiv is an html div element where the plot should appear\ndata is an array of JSON objects describing the various traces in the visualization\nlayout is a JSON object describing the layout properties of the visualization.","category":"page"},{"location":"basics/","page":"Preliminaries","title":"Preliminaries","text":"The graphdiv argument is handled automatically by one of the supported frontends, so users of this package will mostly be concerned about constructing the data and layout arguments.","category":"page"},{"location":"basics/","page":"Preliminaries","title":"Preliminaries","text":"For a complete list of traces and their attributes see the [plotly.js chart attribute reference][_plotlyref].","category":"page"},{"location":"basics/","page":"Preliminaries","title":"Preliminaries","text":"<!– As of version 0.6.0 of this package you can also view a local version of this page that is a bit easier to navigate by calling the PlotlyJS.docs() function from the Julia prompt. This will open an electron window with a local webpage containing a version of that reference page. –>","category":"page"},{"location":"basics/#Julia-types","page":"Preliminaries","title":"Julia types","text":"","category":"section"},{"location":"basics/","page":"Preliminaries","title":"Preliminaries","text":"There are three core types for representing a visualization (not counting the two abstract types):","category":"page"},{"location":"basics/","page":"Preliminaries","title":"Preliminaries","text":"abstract type AbstractTrace end\nabstract type AbstractLayout end\n\nmutable struct GenericTrace{T<:AbstractDict{Symbol,Any}} <: AbstractTrace\n    kind::ASCIIString\n    fields::T\nend\n\nmutable struct Layout{T<:AbstractDict{Symbol,Any}} <: AbstractLayout\n    fields::T\nend\n\nmutable struct Plot{TT<:AbstractTrace}\n    data::Vector{TT}\n    layout::AbstractLayout\n    divid::Base.Random.UUID\nend","category":"page"},{"location":"basics/","page":"Preliminaries","title":"Preliminaries","text":"The fields of the Plot type map 1-1 to the arguments to the Plotly.newplot function","category":"page"},{"location":"basics/","page":"Preliminaries","title":"Preliminaries","text":"[plotlyjs]: https://plotly.com/javascript/ [plotlyref]: https://plotly.com/javascript/reference/","category":"page"},{"location":"examples/time_series/#Time-Series","page":"Time Series","title":"Time Series","text":"","category":"section"},{"location":"examples/time_series/","page":"Time Series","title":"Time Series","text":"using PlotlyJS","category":"page"},{"location":"examples/time_series/","page":"Time Series","title":"Time Series","text":"function datetimestrings()\n    x = [\"2013-10-04 22:23:00\", \"2013-11-04 22:23:00\", \"2013-12-04 22:23:00\"]\n    plot(scatter(x=x, y=[1 ,3, 6]))\nend\ndatetimestrings()","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"Starting with v0.4.0, PlotlyJS.jl now has support for styles. A style is defined as an instance of the following type:","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"struct Style\n    layout::Layout\n    global_trace::PlotlyAttribute\n    trace::Dict{Symbol,PlotlyAttribute}\nend","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"Let's go over the fields one by one:","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"layout: A Layout object defining style attributes for the layout\nglobal_trace: A PlotlyAttribute (created with the attr function) that","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"contains trace attributes to be applied to traces of all types","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"trace: A dictionary mapping trace types into attributes to be applied to","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"that type of trace","category":"page"},{"location":"styles/#Cyclers","page":"Styles","title":"Cyclers","text":"","category":"section"},{"location":"styles/","page":"Styles","title":"Styles","text":"Starting with v0.7.1, PlotlyJS.jl has a new type called Cycler that can be used to set style properties that should be cycled through for each trace.","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"For example, to have all traces alternate between being colored green and red, I could define:","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"mystyle = Style(global_trace=attr(marker_color=[\"green\", \"red\"]))","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"If I were then to define a plot","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"p = plot(rand(10, 3), style=mystyle)","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"The first and third plots would be green, while the second would be red.","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"As usual, if the marker_color attribute on a trace was already set, then it will not be altered. For example:","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"p = plot(\n    [\n        scatter(y=rand(4)),\n        scatter(y=rand(4), marker_color=\"black\"),\n        scatter(y=rand(4)),\n        scatter(y=rand(4)),\n    ],\n    style=mystyle\n)","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"Then the first and fourth traces would be red, the second black, and the third green.","category":"page"},{"location":"styles/#Defining-Styles","page":"Styles","title":"Defining Styles","text":"","category":"section"},{"location":"styles/","page":"Styles","title":"Styles","text":"There are 3 ways to define a Style:","category":"page"},{"location":"styles/#.-Styles-from-scratch","page":"Styles","title":"1. Styles from scratch","text":"","category":"section"},{"location":"styles/","page":"Styles","title":"Styles","text":"To define a brand new style, you simply construct one or more of the fields and assign it using the keyword argument Style constructor. For example, this is how the ggplot style is defined (as of time of writing):","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"ggplot = let\n    axis = attr(showgrid=true, gridcolor=\"white\", linewidth=1.0,\n                linecolor=\"white\", titlefont_color=\"#555555\",\n                titlefont_size=14, ticks=\"outside\",\n                tickcolor=\"#555555\"\n                )\n    layout = Layout(plot_bgcolor=\"#E5E5E5\",\n                    paper_bgcolor=\"white\",\n                    font_size=10,\n                    xaxis=axis,\n                    yaxis=axis,\n                    titlefont_size=14)\n\n    colors = Cycler([\n        \"#E24A33\", \"#348ABD\", \"#988ED5\", \"#777777\", \"#FBC15E\",\n        \"#8EBA42\", \"#FFB5B8\"\n    ])\n    gta = attr(\n        marker_line_width=0.5, marker_line_color=\"#348ABD\", marker_color=colors\n    )\n    Style(layout=layout, global_trace=gta)\nend","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"When displayed in the REPL we see the following:","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"Style with:\n  - layout with fields font, margin, paper_bgcolor, plot_bgcolor, titlefont, xaxis, and yaxis\n  - global_trace: PlotlyAttribute with field marker","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"Notice that we didn't have to define the trace field. When building new Styles you only need to define the fields of the Style type that you actually use in your style.","category":"page"},{"location":"styles/#.-From-other-Styles","page":"Styles","title":"2. From other Styles","text":"","category":"section"},{"location":"styles/","page":"Styles","title":"Styles","text":"The second approach is to define a new Style, starting from an existing style. Suppose that I liked the ggplot style, but wanted to make sure that the marker symbol on scatter traces was always a square. I could define the following style:","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"square_ggplot = Style(ggplot,\n                      trace=Dict(:scatter => attr(marker_symbol=\"square\")))","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"When displayed in the REPL we see the following:","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"Style with:\n  - layout with fields font, margin, paper_bgcolor, plot_bgcolor, titlefont, xaxis, and yaxis\n  - global_trace: PlotlyAttribute with field marker\n  - trace:\n    - scatter: PlotlyAttribute with field marker","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"Notice that all the information for color_cycle, layout and global_trace is the same as in the ggplot case above, but we now have the addition of another section for the trace field as it is no longer empty.","category":"page"},{"location":"styles/#.-Composition","page":"Styles","title":"3. Composition","text":"","category":"section"},{"location":"styles/","page":"Styles","title":"Styles","text":"The final method for constructing new Styles is to compose existing styles.","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"Suppose that we want the ability to easily change the font size on the plot title to be large, say at a level of 20. We might want to apply this transformation to multiple existing styles. One way we could achieve this is by defining","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"big_title = Style(layout=Layout(titlefont_size=20))","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"and then composing big_title with an existing Style (e.g. ggplot from above) by calling","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"big_ggplot = Style(ggplot, big_title)","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"It is important that we put big_title after ggplot as the composing Style constructor has the same behavior as the function Base.merge where fields that appear in both the left and right arguments are set to the value of the rightmost appearance.","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"The only thing we've gained over method number 2 for defining styles is that we can now reuse the big_title Style as many times as we'd like. This is great, but doesn't actually show off the power of composing Styles. Composition becomes more powerful when you use more than two styles. Consider the following example:","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"square = Style(trace=Dict(:scatter => attr(marker_symbol=\"square\")))\nbig_square_ggplot = Style(ggplot, square, big_title)","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"Here the order of square and big_title was not important as they don't define any of the same attributes.","category":"page"},{"location":"styles/#Using-Styles","page":"Styles","title":"Using Styles","text":"","category":"section"},{"location":"styles/","page":"Styles","title":"Styles","text":"Now that we know how to build a Style, how do we use it?. There are two main ways to use a Style:","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"Global mode: call the use_style!(::Style) function to set a global style","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"for all subsequent plots (styles are not applied retroactively to plots that were created before this function is called).","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"Plot by plot mode: All methods of the plot and Plot functions accept a","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"keyword argument style::Style that sets the style for that plot only.","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"note: Note\nStyles do not transfer to parent plots when creating subplots. If you want to apply a Style to a plot containing subplots you must either use the global mode or construct the plot and set the style field on the parent after subplots are created (e.g. p = [p1 p2]; p.style=ggplot, where ggplot is defined as above)","category":"page"},{"location":"styles/#Built-in-Styles","page":"Styles","title":"Built in Styles","text":"","category":"section"},{"location":"styles/","page":"Styles","title":"Styles","text":"There are a few built in styles that come with PlotlyJS.jl. More will be added over time. To see which styles are currently built in look at the unexported PlotlyJS.STYLES variable.","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"To obtain a built in style use the method style(s::Symbol), where s is one of the symbols in PlotlyJS.STYLES.","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"To use a built in style globally use the method use_style!(s::Symbol), where again s is a symbol from PlotlyJS.STYLES.","category":"page"},{"location":"styles/#Appendix:-How-Styles-work","page":"Styles","title":"Appendix: How Styles work","text":"","category":"section"},{"location":"styles/","page":"Styles","title":"Styles","text":"The best way to think about styles is that they will apply default values for attributes, only if the attribute is not already defined. For example, suppose we had the following style:","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"goofy = Style(global_trace=attr(marker_color=\"red\"),\n              trace=Dict(:scatter => attr(mode=\"markers\")))","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"two plots:","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"p1 = plot(scatter(y=1:3, mode=\"lines\", marker_symbol=\"square\"), style=goofy)\np2 = plot(scatter(y=1:3, marker_color=\"green\"), style=goofy)","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"If we inspect the json from these two plots we see:","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"julia> print(json(p1, 2))\n{\n  \"layout\": {\n    \"margin\": {\n      \"r\": 50,\n      \"l\": 50,\n      \"b\": 50,\n      \"t\": 60\n    }\n  },\n  \"data\": [\n    {\n      \"y\": [\n        1,\n        2,\n        3\n      ],\n      \"type\": \"scatter\",\n      \"mode\": \"lines\",\n      \"marker\": {\n        \"symbol\": \"square\",\n        \"color\": \"red\"\n      }\n    }\n  ]\n}\n\njulia> print(json(p2, 2))\n{\n  \"layout\": {\n    \"margin\": {\n      \"r\": 50,\n      \"l\": 50,\n      \"b\": 50,\n      \"t\": 60\n    }\n  },\n  \"data\": [\n    {\n      \"y\": [\n        1,\n        2,\n        3\n      ],\n      \"type\": \"scatter\",\n      \"marker\": {\n        \"color\": \"green\"\n      },\n      \"mode\": \"markers\"\n    }\n  ]\n}","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"Notice that on p1:","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"the marker.color attribute was set to red\nmarker.symbol remained square\nmode was not changed from lines to markers.","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"On the other hand, in p2 we see that the","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"mode was set to markers\nmarker.color was not changed from green to red","category":"page"},{"location":"styles/","page":"Styles","title":"Styles","text":"This happened because the scatter in p1 defined the mode attribute, but not marker_color whereas the scatter in p2 defined marker_color but not mode. In both cases the attributes inside the Style became a default value for fields that were not already set inside the trace.","category":"page"},{"location":"examples/shapes/#Shapes","page":"Shapes","title":"Shapes","text":"","category":"section"},{"location":"examples/shapes/","page":"Shapes","title":"Shapes","text":"using PlotlyJS, Distributions","category":"page"},{"location":"examples/shapes/","page":"Shapes","title":"Shapes","text":"function house()\n    trace1 = scatter()\n    x0 = [2,   2,   5.5, 9,   9, 2,   5, 5, 6]\n    y0 = [1,   5.5, 9.5, 5.5, 1, 5.5, 1, 4, 4]\n    x1 = [2,   5.5, 9,   9,   2, 9,   5, 6, 6]\n    y1 = [5.5, 9.5, 5.5, 1,   1, 5.5, 4, 4, 1]\n    shapes = line(x0, x1, y0, y1; xref=\"x\", yref=\"y\")\n    plot([trace1],\n         Layout(;shapes=shapes, xaxis_range=(1, 10), yaxis_range=(0, 10)))\nend\nhouse()","category":"page"},{"location":"examples/shapes/","page":"Shapes","title":"Shapes","text":"function house2()\n    trace1 = scatter()\n    _p = string(\"M 2 1 L 2 5.5 L 5.5 9.6 L 9 5.5 L 9 1 L 2 1 \",\n                \"M 2 5.5 L 9 5.5 \",\n                \"M 5 1 L 5 4 L 6 4 L 6 1 Z\")\n    plot([trace1],\n         Layout(;shapes=[path(_p)], xaxis_range=(1, 10), yaxis_range=(0, 10)))\nend\nhouse2()","category":"page"},{"location":"examples/shapes/","page":"Shapes","title":"Shapes","text":"function clusters()\n    x0 = rand(Normal(2, 0.45), 300)\n    y0 = rand(Normal(2, 0.45), 300)\n    x1 = rand(Normal(6, 0.4), 200)\n    y1 = rand(Normal(6, 0.4), 200)\n    x2 = rand(Normal(4, 0.3), 200)\n    y2 = rand(Normal(4, 0.3), 200)\n\n    data = [scatter(;x=x0, y=y0, mode=\"markers\"),\n              scatter(;x=x1, y=y1, mode=\"markers\"),\n              scatter(;x=x2, y=y2, mode=\"markers\"),\n              scatter(;x=x1, y=y0, mode=\"markers\")]\n\n    args = [(x0, y0, \"blue\"), (x1, y1, \"orange\"), (x2, y2, \"green\"),\n            (x1, y0, \"red\")]\n    shapes = [circle(x0=minimum(x), y0=minimum(y),\n                     x1=maximum(x), y1=maximum(y);\n                     opacity=0.2, fillcolor=c, line_color=c)\n              for (x, y, c) in args]\n    plot(data, Layout(;height=400, width=480, showlegend=false, shapes=shapes))\nend\nclusters()","category":"page"},{"location":"examples/shapes/","page":"Shapes","title":"Shapes","text":"function temperature()\n    x = [\"2015-02-01\", \"2015-02-02\", \"2015-02-03\", \"2015-02-04\", \"2015-02-05\",\n         \"2015-02-06\", \"2015-02-07\", \"2015-02-08\", \"2015-02-09\", \"2015-02-10\",\n         \"2015-02-11\", \"2015-02-12\", \"2015-02-13\", \"2015-02-14\", \"2015-02-15\",\n         \"2015-02-16\", \"2015-02-17\", \"2015-02-18\", \"2015-02-19\", \"2015-02-20\",\n         \"2015-02-21\", \"2015-02-22\", \"2015-02-23\", \"2015-02-24\", \"2015-02-25\",\n         \"2015-02-26\", \"2015-02-27\", \"2015-02-28\"]\n    y = rand(1:20, length(x))\n    data = scatter(;x=x, y=y, name=\"temperature\", mode=\"line\")\n\n    shapes = rect([\"2015-02-04\", \"2015-02-20\"], [\"2015-02-06\", \"2015-02-22\"],\n                  0, 1; fillcolor=\"#d3d3d3\", opacity=0.2, line_width=0,\n                  xref=\"x\", yref=\"paper\")\n    plot(data, Layout(shapes=shapes, width=500, height=500))\nend\ntemperature()","category":"page"},{"location":"examples/shapes/","page":"Shapes","title":"Shapes","text":"function vlines1()\n    # one scalar argument produces one line. Need to wrap in an array because\n    # layout.shapes should be an array\n    trace1 = scatter(;x=1:10, y=(1:10).^2)\n    shapes = [vline(2)]\n    plot([trace1], Layout(;shapes=shapes))\nend\nvlines1()","category":"page"},{"location":"examples/shapes/","page":"Shapes","title":"Shapes","text":"function vlines2()\n    # one argument draws a vertical line up the entire plot\n    trace1 = scatter(;x=1:10, y=(1:10).^2)\n    shapes = vline([2, 6])\n    plot([trace1], Layout(;shapes=shapes))\nend\nvlines2()","category":"page"},{"location":"examples/shapes/","page":"Shapes","title":"Shapes","text":"function vlines3()\n    # yref paper makes the 2nd and 3rd arguments on a (0, 1) scale vertically\n    # so 0.5 is 1/2 through the plot regardless of the values on y-axis\n    trace1 = scatter(;x=1:10, y=(1:10).^2)\n    shapes = vline([2, 6], 0, 0.5; yref=\"paper\")\n    plot([trace1], Layout(;shapes=shapes))\nend\nvlines3()","category":"page"},{"location":"examples/shapes/","page":"Shapes","title":"Shapes","text":"function vlines4()\n    # Whichever argument is a scalar is repeated\n    trace1 = scatter(;x=1:10, y=(1:10).^2)\n    shapes = vline([2, 6], 0, [0.5, 0.75]; yref=\"paper\")\n    plot([trace1], Layout(;shapes=shapes))\nend\nvlines4()","category":"page"},{"location":"examples/shapes/","page":"Shapes","title":"Shapes","text":"function vlines5()\n    # we can also set arbitrary line attributes line color and dash\n    trace1 = scatter(;x=1:10, y=(1:10).^2)\n    shapes = vline([2, 6], 0, [0.5, 0.75]; yref=\"paper\",\n                   line_color=\"green\", line_dash=\"dashdot\")\n    plot([trace1], Layout(;shapes=shapes))\nend\nvlines5()","category":"page"},{"location":"examples/shapes/","page":"Shapes","title":"Shapes","text":"function hlines1()\n    # one scalar argument produces one line. Need to wrap in an array because\n    # layout.shapes should be an array\n    trace1 = scatter(;x=1:10, y=(1:10).^2)\n    shapes = [hline(2)]\n    plot([trace1], Layout(;shapes=shapes))\nend\nhlines1()","category":"page"},{"location":"examples/shapes/","page":"Shapes","title":"Shapes","text":"function hlines2()\n    # one argument draws a horizontal line across the entire plot\n    trace1 = scatter(;x=1:10, y=(1:10).^2)\n    shapes = hline([25, 81])\n    plot([trace1], Layout(;shapes=shapes))\nend\nhlines2()","category":"page"},{"location":"examples/shapes/","page":"Shapes","title":"Shapes","text":"function hlines3()\n    # xref paper makes the 2nd and 3rd arguments on a (0, 1) scale horizontally\n    # so 0.5 is 1/2 through the plot regardless of the values on x-axis\n    trace1 = scatter(;x=1:10, y=(1:10).^2)\n    shapes = hline([25, 81], 0, 0.5; xref=\"paper\")\n    plot([trace1], Layout(;shapes=shapes))\nend\nhlines3()","category":"page"},{"location":"examples/shapes/","page":"Shapes","title":"Shapes","text":"function hlines4()\n    # Whichever argument is a scalar is repeated\n    trace1 = scatter(;x=1:10, y=(1:10).^2)\n    shapes = hline([25, 81], 0, [0.5, 0.75]; xref=\"paper\")\n    plot([trace1], Layout(;shapes=shapes))\nend\nhlines4()","category":"page"},{"location":"examples/shapes/","page":"Shapes","title":"Shapes","text":"function hlines5()\n    # we can also set arbitrary line attributes line color and dash\n    trace1 = scatter(;x=1:10, y=(1:10).^2)\n    shapes = hline([25, 81], 0, [0.5, 0.75]; xref=\"paper\",\n                   line_color=\"green\", line_dash=\"dashdot\")\n    plot([trace1], Layout(;shapes=shapes))\nend\nhlines5()","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"<!– TODO: create API docs from docstrings and add link below –>","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"There are various methods defined on the Plot type. We will cover a few of them here, but consult the (forthcoming) API docs for more exhaustive coverage.","category":"page"},{"location":"manipulating_plots/#Julia-functions","page":"Working with plots","title":"Julia functions","text":"","category":"section"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"Plot and SyncPlot both have implementations of common Julia methods:","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"size: returns the width and layout attributes in the plot's layout\ncopy: create a shallow copy of all traces in the plot and the layout, but","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"create a new divid","category":"page"},{"location":"manipulating_plots/#API-functions","page":"Working with plots","title":"API functions","text":"","category":"section"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"All exported functions from the plotly.js API have been exposed to Julia and operate on both Plot and SyncPlot instances. Each of these functions has semantics that match the semantics of plotly.js","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"In PlotlyJS.jl these functions are spelled:","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"restyle!: edit attributes on one or more traces\nrelayout!: edit attributes on the layout\nupdate!: combination of restyle! and relayout!\nreact!: In place updating of all traces and layout in plot. More efficient than constructing an entirely new plot from scratch, but has the same effect.\naddtraces!: add traces to a plot at specified indices\ndeletetraces!: delete specific traces from a plot\nmovetraces!: reorder traces in a plot\nredraw!: for a redraw of an entire plot\npurge!: completely remove all data and layout from the chart\nextendtraces!: Extend specific attributes of one or more traces with more data by appending to the end of the attribute\nprependtraces!: Prepend additional data to specific attributes on one or more traces","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"When any of these routines is called on a SyncPlot the underlying Plot object (in the plot field on the SyncPlot) is updated and the plotly.js function is called. This is where SyncPlot gets its name: when modifying a plot, it keeps the Julia object and the display in sync.","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"<!– TODO: create API docs from docstrings and add link below –>","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"For more details on which methods are available for each of the above functions consult the docstrings or (forthcoming) API documentation.","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"note: Note\nBe especially careful when trying to use restyle!, extendtraces!, and prependtraces! to set attributes that are arrays. The semantics are a bit subtle. Check the docstring for details and examples","category":"page"},{"location":"manipulating_plots/#Subplots","page":"Working with plots","title":"Subplots","text":"","category":"section"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"A common task is to construct subpots, or plots with more than one set of axes. This is possible using the declarative plotly.js syntax, but can be tedious at best.","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"PlotlyJS.jl provides a conveient syntax for constructing what we will call regular grids of subplots. By regular we mean a square grid of plots.","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"To do this we will make a pun of the vcat, hcat, and hvcat functions from Base and leverage the array construction syntax to build up our subplots.","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"Suppose we are working with the following plots:","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"using PlotlyJS  # hide\np1 = Plot(scatter(;y=randn(3)))\np2 = Plot(histogram(;x=randn(50), nbinsx=4))\np3 = Plot(scatter(;y=cumsum(randn(12)), name=\"Random Walk\"))\np4 = Plot([scatter(;x=1:4, y=[0, 2, 3, 5], fill=\"tozeroy\"),\n           scatter(;x=1:4, y=[3, 5, 1, 7], fill=\"tonexty\")])","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"If we wanted to combine p1 and p2 as subplots side-by-side, we would do","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"[p1 p2]","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"If instead we wanted two rows and one column we could","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"[p3, p4]","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"Finally, we can make a 2x2 grid of subplots:","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"[p1 p2\n p3 p4]","category":"page"},{"location":"manipulating_plots/#Saving-figures","page":"Working with plots","title":"Saving figures","text":"","category":"section"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"Figures can be saved in a variety of formats using the savefig function.","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"note: Note\n","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"Note that the docs below are shown for the PlotlyBase.Plot type, but are also defined for PlotlyJS.SyncPlot. Thus, you can use these methods after calling either plot or Plot.","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"This function has a few methods:","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"1","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"savefig(::Union{PlotlyBase.Plot}, ::String)","category":"page"},{"location":"manipulating_plots/#PlotlyBase.savefig-Tuple{Plot,String}","page":"Working with plots","title":"PlotlyBase.savefig","text":"savefig(\n    p::Plot, fn::AbstractString;\n    format::Union{Nothing,String}=nothing,\n    width::Union{Nothing,Int}=nothing,\n    height::Union{Nothing,Int}=nothing,\n    scale::Union{Nothing,Real}=nothing,\n)\n\nSave a plot p to a file named fn. If format is given and is one of png, jpeg, webp, svg, pdf, eps, json, or html; it will be the format of the file. By default the format is guessed from the extension of fn. scale sets the image scale. width and height set the dimensions, in pixels. Defaults are taken from p.layout, or supplied by plotly\n\n\n\n\n\n","category":"method"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"When using this method the format of the file is inferred based on the extension of the second argument. The examples below show the possible export formats:","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"savefig(p::Union{Plot,SyncPlot}, \"output_filename.pdf\")\nsavefig(p::Union{Plot,SyncPlot}, \"output_filename.html\")\nsavefig(p::Union{Plot,SyncPlot}, \"output_filename.json\")\nsavefig(p::Union{Plot,SyncPlot}, \"output_filename.png\")\nsavefig(p::Union{Plot,SyncPlot}, \"output_filename.svg\")\nsavefig(p::Union{Plot,SyncPlot}, \"output_filename.jpeg\")\nsavefig(p::Union{Plot,SyncPlot}, \"output_filename.webp\")","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"2","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"savefig(\n    io::IO,\n    p::Plot;\n    width::Union{Nothing,Int}=nothing,\n    height::Union{Nothing,Int}=nothing,\n    scale::Union{Nothing,Real}=nothing,\n    format::String=\"png\"\n)","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"This method allows you to save a plot directly to an open IO stream.","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"See the savefig(::IO, ::PlotlyBase.Plot) API docs for more information.","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"3","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"Base.show(::IO, ::MIME, ::Union{PlotlyBase.Plot})","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"This method hooks into Julia's rich display system.","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"Possible arguments for the second argument are shown in the examples below:","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"savefig(io::IO, ::MIME\"application/pdf\", p::Union{Plot,SyncPlot})\nsavefig(io::IO, ::MIME\"image/png\", p::Union{Plot,SyncPlot})\nsavefig(io::IO, ::MIME\"image/svg+xml\", p::Union{Plot,SyncPlot})\nsavefig(io::IO, ::MIME\"image/eps\", p::Union{Plot,SyncPlot})\nsavefig(io::IO, ::MIME\"image/jpeg\", p::Union{Plot,SyncPlot})\nsavefig(io::IO, ::MIME\"application/json\", p::Union{Plot,SyncPlot})\nsavefig(io::IO, ::MIME\"application/json; charset=UTF-8\", p::Union{Plot,SyncPlot})","category":"page"},{"location":"manipulating_plots/","page":"Working with plots","title":"Working with plots","text":"note: Note\nYou can also save the json for a figure by calling savejson(p::Union{Plot,SyncPlot}, filename::String).","category":"page"},{"location":"examples/box_plots/#Box-Plots","page":"Box Plots","title":"Box Plots","text":"","category":"section"},{"location":"examples/box_plots/","page":"Box Plots","title":"Box Plots","text":"using PlotlyJS","category":"page"},{"location":"examples/box_plots/","page":"Box Plots","title":"Box Plots","text":"function box1()\n    y0 = rand(50)\n    y1 = rand(50) .+ 1\n    trace1 = box(;y=y0)\n    trace2 = box(;y=y1)\n    data = [trace1, trace2]\n    plot(data)\nend\nbox1()","category":"page"},{"location":"examples/box_plots/","page":"Box Plots","title":"Box Plots","text":"function box2()\n    data = box(;y=[0, 1, 1, 2, 3, 5, 8, 13, 21],\n                boxpoints=\"all\",\n                jitter=0.3,\n                pointpos=-1.8)\n    plot(data)\nend\nbox2()","category":"page"},{"location":"examples/box_plots/","page":"Box Plots","title":"Box Plots","text":"function box3()\n    trace1 = box(;x=[1, 2, 3, 4, 4, 4, 8, 9, 10],\n                  name=\"Set 1\")\n    trace2 = box(;x=[2, 3, 3, 3, 3, 5, 6, 6, 7],\n                  name=\"Set 2\")\n    data = [trace1, trace2]\n    layout = Layout(;title=\"Horizontal Box Plot\")\n\n    plot(data, layout)\nend\nbox3()","category":"page"},{"location":"examples/box_plots/","page":"Box Plots","title":"Box Plots","text":"function box4()\n    x0 = [\"day 1\", \"day 1\", \"day 1\", \"day 1\", \"day 1\", \"day 1\",\n          \"day 2\", \"day 2\", \"day 2\", \"day 2\", \"day 2\", \"day 2\"]\n    trace1 = box(;y=[0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3],\n                  x=x0,\n                  name=\"kale\",\n                  marker_color=\"#3D9970\")\n    trace2 = box(;y=[0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2],\n                  x=x0,\n                  name=\"radishes\",\n                  marker_color=\"#FF4136\")\n    trace3 = box(;y=[0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5],\n                  x=x0,\n                  name=\"carrots\",\n                  marker_color=\"#FF851B\")\n    data = [trace1, trace2, trace3]\n    layout = Layout(;yaxis=attr(title=\"normalized moisture\", zeroline=false),\n                    boxmode=\"group\")\n    plot(data, layout)\nend\nbox4()","category":"page"},{"location":"examples/box_plots/","page":"Box Plots","title":"Box Plots","text":"function box5()\n    trace1 = box(;y=[0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5,\n                     7.75, 8.15, 8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5,\n                     12, 16, 20.90, 22.3, 23.25],\n                  name=\"All Points\",\n                  jitter=0.3,\n                  pointpos=-1.8,\n                  marker_color=\"rgb(7, 40, 89)\",\n                  boxpoints=\"all\")\n    trace2 = box(;y=[0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5,\n                     7.75, 8.15, 8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5,\n                     12, 16, 20.90, 22.3, 23.25],\n                  name=\"Only Wiskers\",\n                  marker_color=\"rgb(9, 56, 125)\",\n                  boxpoints=false)\n    trace3 = box(;y=[0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5,\n                     7.75, 8.15, 8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5,\n                     12, 16, 20.90, 22.3, 23.25],\n                  name=\"Suspected Outlier\",\n                  marker=attr(color=\"rgb(8, 8, 156)\",\n                              outliercolor=\"rgba(219, 64, 82, 0.6)\",\n                              line=attr(outliercolor=\"rgba(219, 64, 82, 1.0)\",\n                                        outlierwidth=2)),\n                  boxpoints=\"suspectedoutliers\")\n    trace4 = box(;y=[0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5,\n                     7.75, 8.15, 8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5,\n                     12, 16, 20.90, 22.3, 23.25],\n                  name=\"Wiskers and Outliers\",\n                  marker_color=\"rgb(107, 174, 214)\",\n                  boxpoints=\"Outliers\")\n    data = [trace1, trace2, trace3, trace4]\n    layout = Layout(;title=\"Box Plot Styling Outliers\")\n    plot(data, layout)\nend\nbox5()","category":"page"},{"location":"examples/box_plots/","page":"Box Plots","title":"Box Plots","text":"function box6()\n    trace1 = box(;y=[2.37, 2.16, 4.82, 1.73, 1.04, 0.23, 1.32, 2.91, 0.11,\n                     4.51, 0.51, 3.75, 1.35, 2.98, 4.50, 0.18, 4.66, 1.30,\n                     2.06, 1.19],\n                  name=\"Only Mean\",\n                  marker_color=\"rgb(8, 81, 156)\",\n                  boxmean=true)\n    trace2 = box(;y=[2.37, 2.16, 4.82, 1.73, 1.04, 0.23, 1.32, 2.91, 0.11,\n                     4.51, 0.51, 3.75, 1.35, 2.98, 4.50, 0.18, 4.66, 1.30,\n                     2.06, 1.19],\n                  name=\"Mean and Standard Deviation\",\n                  marker_color=\"rgb(10, 140, 208)\",\n                  boxmean=\"sd\")\n    data = [trace1, trace2]\n    layout = Layout(;title=\"Box Plot Styling Mean and Standard Deviation\")\n    plot(data, layout)\nend\nbox6()","category":"page"},{"location":"examples/box_plots/","page":"Box Plots","title":"Box Plots","text":"function box7()\n    y0 = [\"day 1\", \"day 1\", \"day 1\", \"day 1\", \"day 1\", \"day 1\",\n          \"day 2\", \"day 2\", \"day 2\", \"day 2\", \"day 2\", \"day 2\"]\n    trace1 = box(;x=[0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3],\n                  y=y0,\n                  name=\"kale\",\n                  marker_color=\"#3D9970\",\n                  boxmean=false,\n                  orientation=\"h\")\n    trace2 = box(;x=[0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2],\n                  y=y0,\n                  name=\"radishes\",\n                  marker_color=\"#FF4136\",\n                  boxmean=false,\n                  orientation=\"h\")\n    trace3 = box(;x=[0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5],\n                  y=y0,\n                  name=\"carrots\",\n                  marker_color=\"#FF851B\",\n                  boxmean=false,\n                  orientation=\"h\")\n    data = [trace1, trace2, trace3]\n    layout = Layout(;title=\"Grouped Horizontal Box Plot\",\n                     xaxis=attr(title=\"normalized moisture\", zeroline=false),\n                     boxmode=\"group\")\n    plot(data, layout)\nend\nbox7()","category":"page"},{"location":"examples/box_plots/","page":"Box Plots","title":"Box Plots","text":"function box8()\n    trace1 = box(;y=[1, 2, 3, 4, 4, 4, 8, 9, 10],\n                  name=\"Sample A\",\n                  marker_color=\"rgb(214, 12, 140)\")\n    trace2 = box(;y=[2, 3, 3, 3, 3, 5, 6, 6, 7],\n                  name=\"Sample B\",\n                  marker_color=\"rgb(0, 128, 128)\")\n    data = [trace1, trace2]\n    layout = Layout(;title=\"Colored Box Plot\")\n    plot(data, layout)\nend\nbox8()","category":"page"},{"location":"examples/box_plots/","page":"Box Plots","title":"Box Plots","text":"function box9()\n    xData = [\"Carmelo<br>Anthony\", \"Dwyane<br>Wade\", \"Deron<br>Williams\",\n             \"Brook<br>Lopez\", \"Damian<br>Lillard\", \"David<br>West\",\n             \"Blake<br>Griffin\", \"David<br>Lee\", \"Demar<br>Derozan\"]\n\n    _getrandom(num, mul) = mul .* rand(num)\n\n    yData = Array[\n            _getrandom(30, 10),\n            _getrandom(30, 20),\n            _getrandom(30, 25),\n            _getrandom(30, 40),\n            _getrandom(30, 45),\n            _getrandom(30, 30),\n            _getrandom(30, 20),\n            _getrandom(30, 15),\n            _getrandom(30, 43)\n        ]\n    colors = [\"rgba(93, 164, 214, 0.5)\", \"rgba(255, 144, 14, 0.5)\",\n              \"rgba(44, 160, 101, 0.5)\", \"rgba(255, 65, 54, 0.5)\",\n              \"rgba(207, 114, 255, 0.5)\", \"rgba(127, 96, 0, 0.5)\",\n              \"rgba(255, 140, 184, 0.5)\", \"rgba(79, 90, 117, 0.5)\",\n              \"rgba(222, 223, 0, 0.5)\"]\n\n    data = GenericTrace[]\n    for i in 1:length(xData)\n        trace = box(;y=yData[i],\n                     name=xData[i],\n                     boxpoints=\"all\",\n                     jitter=0.5,\n                     whiskerwidth=0.2,\n                     fillcolor=\"cls\",\n                     marker_size=2,\n                     line_width=1)\n        push!(data, trace)\n    end\n\n    t = \"Points Scored by the Top 9 Scoring NBA Players in 2012\"\n    layout = Layout(;title=t,\n                     yaxis=attr(autorange=true, showgrid=true, zeroline=true,\n                                dtick=5, gridcolor=\"rgb(255, 255, 255)\",\n                                gridwidth=1,\n                                zerolinecolor=\"rgb(255, 255, 255)\",\n                                zerolinewidth=2),\n                     margin=attr(l=40, r=30, b=80, t=100),\n                     paper_bgcolor=\"rgb(243, 243, 243)\",\n                     plot_bgcolor=\"rgb(243, 243, 243)\",\n                     showlegend=false)\n    plot(data, layout)\nend\nbox9()","category":"page"},{"location":"examples/box_plots/","page":"Box Plots","title":"Box Plots","text":"function box10()\n    n_box = 30\n    colors = [\"hsl($i, 50%, 50%)\" for i in range(0, stop=360, length=n_box)]\n\n    gen_y_data(i) =\n        (3.5*sin(pi*i/n_box) + i/n_box) .+ (1.5+0.5*cos(pi*i/n_box)).*rand(10)\n\n    ys = Array[gen_y_data(i) for i in 1:n_box]\n\n    # Create Traces\n    data = GenericTrace[box(y=y, marker_color=mc) for (y, mc) in zip(ys, colors)]\n\n    #Format the layout\n    layout = Layout(;xaxis=attr(;showgrid=false, zeroline=false,\n                                 tickangle=60, showticklabels=true),\n                     yaxis=attr(;zeroline=false, gridcolor=\"white\"),\n                     paper_bgcolor=\"rgb(233, 233, 233)\",\n                     plot_bgcolor=\"rgb(233, 233, 233)\",\n                     showlegend=true)\n    plot(data, layout)\nend\nbox10()","category":"page"},{"location":"examples/finance/#Finance","page":"Financial Charts","title":"Finance","text":"","category":"section"},{"location":"examples/finance/","page":"Financial Charts","title":"Financial Charts","text":"using PlotlyJS, HTTP, CSV","category":"page"},{"location":"examples/finance/","page":"Financial Charts","title":"Financial Charts","text":"function ohlc1()\n    t = ohlc(open=[33.0, 33.3, 33.5, 33.0, 34.1],\n             high=[33.1, 33.3, 33.6, 33.2, 34.8],\n             low=[32.7, 32.7, 32.8, 32.6, 32.8],\n             close=[33.0, 32.9, 33.3, 33.1, 33.1])\n    plot(t)\nend\nohlc1()","category":"page"},{"location":"examples/finance/","page":"Financial Charts","title":"Financial Charts","text":"function ohlc2()\n    function get_ohlc(ticker; kwargs...)\n        res = HTTP.get(\"https://www.quandl.com/api/v3/datasets/WIKI/$(ticker)/data.csv?start_date=2017-01-01\")\n        df = CSV.read(res.body)\n        ohlc(df, x=:Date, open=:Open, high=:High, low=:Low, close=:Close; kwargs...)\n    end\n\n    p1 = plot(get_ohlc(\"AAPL\", name=\"Apple\"), Layout(title=\"Apple\"))\n    p2 = plot(get_ohlc(\"GOOG\", name=\"Google\"), Layout(title=\"Google\"))\n\n    [p1 p2]\nend\nohlc2()","category":"page"},{"location":"examples/finance/","page":"Financial Charts","title":"Financial Charts","text":"function candlestick1()\n    t = candlestick(open=[33.0, 33.3, 33.5, 33.0, 34.1],\n                    high=[33.1, 33.3, 33.6, 33.2, 34.8],\n                    low=[32.7, 32.7, 32.8, 32.6, 32.8],\n                    close=[33.0, 32.9, 33.3, 33.1, 33.1])\n    plot(t)\nend\ncandlestick1()","category":"page"},{"location":"examples/finance/","page":"Financial Charts","title":"Financial Charts","text":"function candlestick2()\n    function get_candlestick(ticker; kwargs...)\n        res = HTTP.get(\"https://www.quandl.com/api/v3/datasets/WIKI/$(ticker)/data.csv?start_date=2017-01-01\")\n        df = CSV.read(res.body)\n        candlestick(df, x=:Date, open=:Open, high=:High, low=:Low, close=:Close; kwargs...)\n    end\n\n    p1 = plot(get_candlestick(\"AAPL\", name=\"Apple\"), Layout(title=\"Apple\"))\n    p2 = plot(get_candlestick(\"GOOG\", name=\"Google\"), Layout(title=\"Google\"))\n\n    [p1 p2]\nend\ncandlestick2()","category":"page"},{"location":"examples/bar/#Bar","page":"Bar","title":"Bar","text":"","category":"section"},{"location":"examples/bar/","page":"Bar","title":"Bar","text":"using PlotlyJS","category":"page"},{"location":"examples/bar/","page":"Bar","title":"Bar","text":"function bar1()\n    data = bar(;x=[\"giraffes\", \"orangutans\", \"monkeys\"],\n               \ty=[20, 14, 23])\n    plot(data)\nend\nbar1()","category":"page"},{"location":"examples/bar/","page":"Bar","title":"Bar","text":"function bar2()\n    trace1 = bar(;x=[\"giraffes\", \"orangutans\", \"monkeys\"],\n                  y=[20, 14, 23],\n                  name=\"SF Zoo\")\n    trace2 = bar(;x=[\"giraffes\", \"orangutans\", \"monkeys\"],\n                  y=[12, 18, 29],\n                  name=\"LA Zoo\")\n    data = [trace1, trace2]\n    layout = Layout(;barmode=\"group\")\n    plot(data, layout)\nend\nbar2()","category":"page"},{"location":"examples/bar/","page":"Bar","title":"Bar","text":"function bar3()\n    trace1 = bar(;x=[\"giraffes\", \"orangutans\", \"monkeys\"],\n                  y=[20, 14, 23],\n                  name=\"SF Zoo\")\n    trace2 = bar(x=[\"giraffes\", \"orangutans\", \"monkeys\"],\n                 y=[12, 18, 29],\n                 name=\"LA Zoo\")\n    data = [trace1, trace2]\n    layout = Layout(;barmode=\"stack\")\n    plot(data, layout)\nend\nbar3()","category":"page"},{"location":"examples/bar/","page":"Bar","title":"Bar","text":"function bar4()\n    data = bar(;x=[\"Product A\", \"Product B\", \"Product C\"],\n                y=[20, 14, 23],\n                text=[\"$(i)% market share\" for i in rand(15:30, 3)],\n                marker=attr(color=\"rgb(158, 202, 225)\", opacity=0.6),\n                line=attr(color=\"rgb(8, 48, 107)\", width=1.5))\n\n    layout = Layout(;title=\"January 2013 Sales Report\")\n\n    plot(data, layout)\nend\nbar4()","category":"page"},{"location":"examples/bar/","page":"Bar","title":"Bar","text":"function bar5()\n    x_value = [\"Product A\", \"Product B\", \"Product C\"]\n    y_value = [20, 14, 23]\n\n    data = bar(;x=x_value,\n                y=y_value,\n                text=[\"$(i)% market share\" for i in rand(15:30, 3)],\n\t\t        marker=attr(color=\"rgb(158, 202, 225)\", opacity=0.6,\n                            line=attr(color=\"rgb(8, 48, 107)\", width=1.5)))\n\n    annotations = []\n\n    for i in 1:length(x_value)\n        result = attr(x=x_value[i],\n                      y=y_value[i],\n                      text=y_value[i],\n                      xanchor=\"center\",\n                      yanchor=\"bottom\",\n                      showarrow=false)\n        push!(annotations, result)\n    end\n\n    layout = Layout(;title=\"January 2013 Sales Report\",\n                    annotations=annotations)\n    plot(data, layout)\nend\nbar5()","category":"page"},{"location":"examples/bar/","page":"Bar","title":"Bar","text":"function bar6()\n    trace1 = bar(;x=[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\",\n                     \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n                  y=[20, 14, 25, 16, 18, 22, 19, 15, 12, 16, 14, 17],\n                  name=\"Primary Product\",\n                  marker_color=\"rgb(49, 130, 189)\",\n                  opacity=0.7)\n    trace2 = bar(;x=[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\",\n                     \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n                  y=[19, 14, 22, 14, 16, 19, 15, 14, 10, 12, 12, 16],\n                  name=\"Secondary Product\",\n\t\t  marker=attr(color=\"rgb(204, 204, 204)\", opacity=0.5))\n    data = [trace1, trace2]\n    layout = Layout(;title=\"2013 Sales Report\",\n                     xaxis_tickangle=-45,\n                     barmode=\"group\")\n    plot(data, layout)\nend\nbar6()","category":"page"},{"location":"examples/bar/","page":"Bar","title":"Bar","text":"function bar7()\n    data = bar(;x=[\"Feature $(s)\" for s in 'A':'E'],\n                y=[20, 14, 23, 25, 22],\n    \t\t    marker_color=[\"rgba(204, 204, 204, 1)\",\n                              \"rgba(222, 45, 38, 0.8)\",\n                              \"rgba(204, 204, 204, 1)\",\n                              \"rgba(204, 204, 204, 1)\",\n                              \"rgba(204, 204, 204, 1)\"])\n    layout = Layout(;title=\"Least Used Feature\")\n    plot(data, layout)\nend\nbar7()","category":"page"},{"location":"examples/bar/","page":"Bar","title":"Bar","text":"function bar8()\n    data = bar(;x=[\"Liam\", \"Sophie\", \"Jacob\", \"Mia\", \"William\", \"Olivia\"],\n                y=[8.0, 8.0, 12.0, 12.0, 13.0, 20.0],\n                text=[\"4.17 below the mean\", \"4.17 below the mean\",\n                      \"0.17 below the mean\", \"0.17 below the mean\",\n                      \"0.83 above the mean\", \"7.83 above the mean\"],\n                marker_color=\"rgb(142, 124, 195)\")\n    layout = Layout(;title=\"Number of Graphs Made this Week\",\n                     font_family=\"Raleway, sans-serif\",\n                     showlegend=false,\n                     xaxis_tickangle=-45,\n                     yaxis=attr(zeroline=false, gridwidth=2),\n                     bargap=0.05)\n    plot(data, layout)\nend\nbar8()","category":"page"},{"location":"examples/bar/","page":"Bar","title":"Bar","text":"function bar9()\n    trace1 = bar(;x=1995:2012,\n                  y=[219, 146, 112, 127, 124, 180, 236, 207, 236, 263, 350,\n                     430, 474, 526, 488, 537, 500, 439],\n                  name=\"Rest of world\",\n                  marker_color=\"rgb(55, 83, 109)\")\n    trace2 = bar(;x=1995:2012,\n                  y=[16, 13, 10, 11, 28, 37, 43, 55, 56, 88, 105, 156, 270,\n                     299, 340, 403, 549, 499],\n                  name=\"China\",\n                  marker_color=\"rgb(26, 118, 255)\")\n\n    data = [trace1, trace2]\n\n    layout = Layout(;title=\"US Export of Plastic Scrap\",\n\t\t             xaxis=attr(tickfont_size= 14,\n                                tickfont_color=\"rgb(107, 107, 107)\"),\n\t\t             yaxis=attr(title=\"USD (millions)\",\n                                titlefont=attr(size=16,\n                                               color=\"rgb(107, 107, 107)\"),\n                                tickfont=attr(size=14,\n                                              color=\"rgb(107, 107, 107)\")),\n                     legend=attr(x=0, y=1.0, bgcolor=\"rgba(255, 255, 255, 0)\",\n                                 bordercolor=\"rgba(255, 255, 255, 0)\"),\n                     barmode=\"group\",\n                     bargap=0.15,\n                     bargroupgap=0.1)\n    plot(data, layout)\nend\nbar9()","category":"page"},{"location":"examples/bar/","page":"Bar","title":"Bar","text":"function bar10()\n    x_data = [\"Product Revenue\", \"Services Revenue\", \"Total Revenue\",\n              \"Fixed Costs\", \"Variable Costs\", \"Total Costs\", \"Total\"]\n    y_data = [400, 660, 660, 590, 400, 400, 340]\n    textList = [\"\\$430K\", \"\\$260K\", \"\\$690K\", \"\\$-120K\", \"\\$-200K\", \"\\$-320K\",\n                \"\\$370K\"]\n\n    #Base\n    trace1 = bar(;x=x_data,\n                  y=[0, 430, 0, 570, 370, 370, 0],\n                  marker_color=\"rgba(1, 1, 1, 0.0)\")\n\n    #Revenue\n    trace2 = bar(;x=x_data,\n                  y=[430, 260, 690, 0, 0, 0, 0],\n                  marker_color=\"rgba(55, 128, 191, 0.7)\",\n\t\t  line=attr(color=\"rgba(55, 128, 191, 1.0)\", width=2))\n\n    #Cost\n    trace3 = bar(;x=x_data,\n                  y=[0, 0, 0, 120, 200, 320, 0],\n\t\t  marker=attr(color=\"rgba(219, 64, 82, 0.7)\",\n\t\t  line=attr(color=\"rgba(219, 64, 82, 1.0)\", width=2)))\n\n    #Profit\n    trace4 = bar(;x=x_data,\n                  y=[0, 0, 0, 0, 0, 0, 370],\n\t\t  marker=attr(color=\"rgba(50, 171, 96, 0.7)\",\n\t\t  line=attr(color=\"rgba(50, 171, 96, 1.0)\", width=2)))\n\n    data = [trace1, trace2, trace3, trace4]\n\n    annotations = []\n    for i in 1:7\n        result = attr(x=x_data[i],\n                      y=y_data[i],\n\t\t              text=textList[i],\n\t\t              font=attr(;family=\"Arial\", font_size=14,\n                                 font_color=\"rgba(245, 246, 249, 1)\"),\n                                 showarrow=false)\n        push!(annotations, result)\n    end\n\n    layout = Layout(;title=\"Annual Profit 2015\",\n                     barmode=\"stack\",\n                     paper_bgcolor=\"rgba(245, 246, 249, 1)\",\n                     plot_bgcolor=\"rgba(245, 246, 249, 1)\",\n                     width=600,\n                     height=600,\n                     showlegend=false,\n                     xaxis_showtickabels=true,\n                     annotations=annotations)\n\n    plot(data, layout)\nend\nbar10()","category":"page"},{"location":"examples/bar/","page":"Bar","title":"Bar","text":"function bar11()\n    trace1 = bar(;x=[1, 2, 3, 4],\n                  y=[1, 4, 9, 16],\n                  name=\"Trace1\")\n    trace2 = bar(;x=[1, 2, 3, 4],\n                  y=[6, -8, -4.5, 8],\n                  name=\"Trace2\")\n    trace3 = bar(;x=[1, 2, 3, 4],\n                  y=[-15, -3, 4.5, -8],\n                  name=\"Trace3\")\n    trace4 = bar(;x=[1, 2, 3, 4],\n                  y=[-1, 3, -3, -4],\n                  name=\"Trace4\")\n    data = [trace1, trace2, trace3, trace4]\n    layout = Layout(;xaxis_title=\"X axis\",\n                     yaxis_title=\"Y axis\",\n                     barmode=\"relative\",\n                     title=\"Relative Barmode\")\n    plot(data, layout)\nend\nbar11()","category":"page"},{"location":"examples/line_scatter/#Line-Scatter","page":"Line and Scatter","title":"Line Scatter","text":"","category":"section"},{"location":"examples/line_scatter/","page":"Line and Scatter","title":"Line and Scatter","text":"using PlotlyJS, DataFrames, CSV, Dates","category":"page"},{"location":"examples/line_scatter/","page":"Line and Scatter","title":"Line and Scatter","text":"function linescatter1()\n    trace1 = scatter(;x=1:4, y=[10, 15, 13, 17], mode=\"markers\")\n    trace2 = scatter(;x=2:5, y=[16, 5, 11, 9], mode=\"lines\")\n    trace3 = scatter(;x=1:4, y=[12, 9, 15, 12], mode=\"lines+markers\")\n    plot([trace1, trace2, trace3])\nend\nlinescatter1()","category":"page"},{"location":"examples/line_scatter/","page":"Line and Scatter","title":"Line and Scatter","text":"function linescatter2()\n    trace1 = scatter(;x=1:5, y=[1, 6, 3, 6, 1],\n                      mode=\"markers\", name=\"Team A\",\n                      text=[\"A-1\", \"A-2\", \"A-3\", \"A-4\", \"A-5\"],\n                      marker_size=12)\n\n    trace2 = scatter(;x=1:5+0.5, y=[4, 1, 7, 1, 4],\n                      mode=\"markers\", name= \"Team B\",\n                      text=[\"B-a\", \"B-b\", \"B-c\", \"B-d\", \"B-e\"])\n    # setting marker.size this way is _equivalent_ to what we did for trace1\n    trace2[\"marker\"] = Dict(:size => 12)\n\n    data = [trace1, trace2]\n    layout = Layout(;title=\"Data Labels Hover\", xaxis_range=[0.75, 5.25],\n                     yaxis_range=[0, 8])\n    plot(data, layout)\nend\nlinescatter2()","category":"page"},{"location":"examples/line_scatter/","page":"Line and Scatter","title":"Line and Scatter","text":"function linescatter3()\n    trace1 = scatter(;x=1:5, y=[1, 6, 3, 6, 1],\n                      mode=\"markers+text\", name=\"Team A\",\n                      textposition=\"top center\",\n                      text=[\"A-1\", \"A-2\", \"A-3\", \"A-4\", \"A-5\"],\n                      marker_size=12, textfont_family=\"Raleway, sans-serif\")\n\n    trace2 = scatter(;x=1:5+0.5, y=[4, 1, 7, 1, 4],\n                      mode=\"markers+text\", name= \"Team B\",\n                      textposition=\"bottom center\",\n                      text= [\"B-a\", \"B-b\", \"B-c\", \"B-d\", \"B-e\"],\n                      marker_size=12, textfont_family=\"Times New Roman\")\n\n    data = [trace1, trace2]\n\n    layout = Layout(;title=\"Data Labels on the Plot\", xaxis_range=[0.75, 5.25],\n                     yaxis_range=[0, 8], legend_y=0.5, legend_yref=\"paper\",\n                     legend=attr(family=\"Arial, sans-serif\", size=20,\n                                 color=\"grey\"))\n    plot(data, layout)\nend\nlinescatter3()","category":"page"},{"location":"examples/line_scatter/","page":"Line and Scatter","title":"Line and Scatter","text":"function linescatter4()\n    trace1 = scatter(;y=fill(5, 40), mode=\"markers\", marker_size=40,\n                      marker_color=0:39)\n    layout = Layout(title=\"Scatter Plot with a Color Dimension\")\n    plot(trace1, layout)\nend\nlinescatter4()","category":"page"},{"location":"examples/line_scatter/","page":"Line and Scatter","title":"Line and Scatter","text":"function linescatter5()\n\n    country = [\"Switzerland (2011)\", \"Chile (2013)\", \"Japan (2014)\",\n               \"United States (2012)\", \"Slovenia (2014)\", \"Canada (2011)\",\n               \"Poland (2010)\", \"Estonia (2015)\", \"Luxembourg (2013)\",\n               \"Portugal (2011)\"]\n\n    votingPop = [40, 45.7, 52, 53.6, 54.1, 54.2, 54.5, 54.7, 55.1, 56.6]\n    regVoters = [49.1, 42, 52.7, 84.3, 51.7, 61.1, 55.3, 64.2, 91.1, 58.9]\n\n    # notice use of `attr` function to make nested attributes\n    trace1 = scatter(;x=votingPop, y=country, mode=\"markers\",\n                      name=\"Percent of estimated voting age population\",\n                      marker=attr(color=\"rgba(156, 165, 196, 0.95)\",\n                                  line_color=\"rgba(156, 165, 196, 1.0)\",\n                                  line_width=1, size=16, symbol=\"circle\"))\n\n    trace2 = scatter(;x=regVoters, y=country, mode=\"markers\",\n                      name=\"Percent of estimated registered voters\")\n    # also could have set the marker props above by using a dict\n    trace2[\"marker\"] = Dict(:color => \"rgba(204, 204, 204, 0.95)\",\n                           :line => Dict(:color=> \"rgba(217, 217, 217, 1.0)\",\n                                         :width=> 1),\n                           :symbol => \"circle\",\n                           :size => 16)\n\n    data = [trace1, trace2]\n    layout = Layout(Dict{Symbol,Any}(:paper_bgcolor => \"rgb(254, 247, 234)\",\n                                     :plot_bgcolor => \"rgb(254, 247, 234)\");\n                    title=\"Votes cast for ten lowest voting age population in OECD countries\",\n                    width=600, height=600, hovermode=\"closest\",\n                    margin=Dict(:l => 140, :r => 40, :b => 50, :t => 80),\n                    xaxis=attr(showgrid=false, showline=true,\n                               linecolor=\"rgb(102, 102, 102)\",\n                               titlefont_color=\"rgb(204, 204, 204)\",\n                               tickfont_color=\"rgb(102, 102, 102)\",\n                               autotick=false, dtick=10, ticks=\"outside\",\n                               tickcolor=\"rgb(102, 102, 102)\"),\n                    legend=attr(font_size=10, yanchor=\"middle\",\n                                xanchor=\"right\"),\n                    )\n    plot(data, layout)\nend\nlinescatter5()","category":"page"},{"location":"examples/line_scatter/","page":"Line and Scatter","title":"Line and Scatter","text":"function linescatter6()\n    trace1 = scatter(;x=[52698, 43117], y=[53, 31],\n                      mode=\"markers\",\n                      name=\"North America\",\n                      text=[\"United States\", \"Canada\"],\n                      marker=attr(color=\"rgb(164, 194, 244)\", size=12,\n                                  line=attr(color=\"white\", width=0.5))\n                      )\n\n    trace2 = scatter(;x=[39317, 37236, 35650, 30066, 29570, 27159, 23557, 21046, 18007],\n                      y=[33, 20, 13, 19, 27, 19, 49, 44, 38],\n                      mode=\"markers\", name=\"Europe\",\n                      marker_size=12, marker_color=\"rgb(255, 217, 102)\",\n                      text=[\"Germany\", \"Britain\", \"France\", \"Spain\", \"Italy\",\n                            \"Czech Rep.\", \"Greece\", \"Poland\", \"Portugal\"])\n\n    trace3 = scatter(;x=[42952, 37037, 33106, 17478, 9813, 5253, 4692, 3899],\n                      y=[23, 42, 54, 89, 14, 99, 93, 70],\n                      mode=\"markers\",\n                      name=\"Asia/Pacific\",\n                      marker_size=12, marker_color=\"rgb(234, 153, 153)\",\n                      text=[\"Australia\", \"Japan\", \"South Korea\", \"Malaysia\",\n                            \"China\", \"Indonesia\", \"Philippines\", \"India\"])\n\n    trace4 = scatter(;x=[19097, 18601, 15595, 13546, 12026, 7434, 5419],\n                      y=[43, 47, 56, 80, 86, 93, 80],\n                      mode=\"markers\", name=\"Latin America\",\n                      marker_size=12, marker_color=\"rgb(142, 124, 195)\",\n                      text=[\"Chile\", \"Argentina\", \"Mexico\", \"Venezuela\",\n                            \"Venezuela\", \"El Salvador\", \"Bolivia\"])\n\n    data = [trace1, trace2, trace3, trace4]\n\n    layout = Layout(;title=\"Quarter 1 Growth\",\n                     xaxis=attr(title=\"GDP per Capital\", showgrid=false, zeroline=false),\n                     yaxis=attr(title=\"Percent\", zeroline=false))\n\n    plot(data, layout)\nend\nlinescatter6()","category":"page"},{"location":"examples/line_scatter/","page":"Line and Scatter","title":"Line and Scatter","text":"function batman()\n    # reference: https://github.com/alanedelman/18.337_2015/blob/master/Lecture01_0909/The%20Bat%20Curve.ipynb\n    σ(x) = @. √(1-x.^2)\n    el(x) = @. 3*σ(x/7)\n    s(x) = @. 4.2 - 0.5*x - 2.0*σ(0.5*x-0.5)\n    b(x) = @. σ(abs(2-x)-1) - x.^2/11 + 0.5x - 3\n    c(x) = [1.7, 1.7, 2.6, 0.9]\n\n    p(i, f; kwargs...) = scatter(;x=[-i; 0.0; i], y=[f(i); NaN; f(i)],\n                                  marker_color=\"black\", showlegend=false,\n                                  kwargs...)\n    traces = vcat(p(3:0.1:7, el; name=\"wings 1\"),\n                  p(4:0.1:7, t->-el(t); name=\"wings 2\"),\n                  p(1:0.1:3, s; name=\"Shoulders\"),\n                  p(0:0.1:4, b; name=\"Bottom\"),\n                  p([0, 0.5, 0.8, 1], c; name=\"head\"))\n\n    plot(traces, Layout(title=\"Batman\"))\nend\nbatman()","category":"page"},{"location":"examples/line_scatter/","page":"Line and Scatter","title":"Line and Scatter","text":"function dumbell()\n    # reference: https://plot.ly/r/dumbbell-plots/\n    # read Data into dataframe\n    nm = tempname()\n    url = \"https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv\"\n    download(url, nm)\n    df = CSV.read(nm)\n    rm(nm)\n\n    # sort dataframe by male earnings\n    df = sort(df, :Men, rev=false)\n\n    men = scatter(;y=df[:School], x=df[:Men], mode=\"markers\", name=\"Men\",\n                   marker=attr(color=\"blue\", size=12))\n    women = scatter(;y=df[:School], x=df[:Women], mode=\"markers\", name=\"Women\",\n                     marker=attr(color=\"pink\", size=12))\n\n    lines = map(eachrow(df)) do r\n        scatter(y=fill(r[:School], 2), x=[r[:Women], r[:Men]], mode=\"lines\",\n                name=r[:School], showlegend=false, line_color=\"gray\")\n    end\n\n    data = Base.typed_vcat(GenericTrace, men, women, lines)\n    layout = Layout(width=650, height=650, margin_l=100, yaxis_title=\"School\",\n                    xaxis_title=\"Annual Salary (thousands)\",\n                    title=\"Gender earnings disparity\")\n\n    plot(data, layout)\nend\ndumbell()","category":"page"},{"location":"examples/line_scatter/","page":"Line and Scatter","title":"Line and Scatter","text":"function errorbars1()\n    trace1 = scatter(;x=vcat(1:10, 10:-1:1),\n                     y=vcat(2:11, 9:-1:0),\n                     fill=\"tozerox\",\n                     fillcolor=\"rgba(0, 100, 80, 0.2)\",\n                     line_color=\"transparent\",\n                     name=\"Fair\",\n                     showlegend=false)\n\n    trace2 = scatter(;x=vcat(1:10, 10:-1:1),\n                     y=[5.5, 3.0, 5.5, 8.0, 6.0, 3.0, 8.0, 5.0, 6.0, 5.5, 4.75,\n                        5.0, 4.0, 7.0, 2.0, 4.0, 7.0, 4.4, 2.0, 4.5],\n                     fill=\"tozerox\",\n                     fillcolor=\"rgba(0, 176, 246, 0.2)\",\n                     line_color=\"transparent\",\n                     name=\"Premium\",\n                     showlegend=false)\n\n    trace3 = scatter(;x=vcat(1:10, 10:-1:1),\n                     y=[11.0, 9.0, 7.0, 5.0, 3.0, 1.0, 3.0, 5.0, 3.0, 1.0,\n                        -1.0, 1.0, 3.0, 1.0, -0.5, 1.0, 3.0, 5.0, 7.0, 9.],\n                     fill=\"tozerox\",\n                     fillcolor=\"rgba(231, 107, 243, 0.2)\",\n                     line_color=\"transparent\",\n                     name=\"Fair\",\n                     showlegend=false)\n\n    trace4 = scatter(;x=1:10, y=1:10,\n                     line_color=\"rgb(00, 100, 80)\",\n                     mode=\"lines\",\n                     name=\"Fair\")\n\n    trace5 = scatter(;x=1:10,\n                     y=[5.0, 2.5, 5.0, 7.5, 5.0, 2.5, 7.5, 4.5, 5.5, 5.],\n                     line_color=\"rgb(0, 176, 246)\",\n                     mode=\"lines\",\n                     name=\"Premium\")\n\n    trace6 = scatter(;x=1:10, y=vcat(10:-2:0, [2, 4,2, 0]),\n                     line_color=\"rgb(231, 107, 243)\",\n                     mode=\"lines\",\n                     name=\"Ideal\")\n    data = [trace1, trace2, trace3, trace4, trace5, trace6]\n    layout = Layout(;paper_bgcolor=\"rgb(255, 255, 255)\",\n                    plot_bgcolor=\"rgb(229, 229, 229)\",\n\n                    xaxis=attr(gridcolor=\"rgb(255, 255, 255)\",\n                               range=[1, 10],\n                               showgrid=true,\n                               showline=false,\n                               showticklabels=true,\n                               tickcolor=\"rgb(127, 127, 127)\",\n                               ticks=\"outside\",\n                               zeroline=false),\n\n                    yaxis=attr(gridcolor=\"rgb(255, 255, 255)\",\n                               showgrid=true,\n                               showline=false,\n                               showticklabels=true,\n                               tickcolor=\"rgb(127, 127, 127)\",\n                               ticks=\"outside\",\n                               zeroline=false))\n\n    plot(data, layout)\nend\nerrorbars1()","category":"page"},{"location":"examples/line_scatter/","page":"Line and Scatter","title":"Line and Scatter","text":"function errorbars2()\n    function random_dates(d1::DateTime, d2::DateTime, n::Int)\n        map(Date, sort!(rand(d1:Dates.Hour(12):d2, n)))\n    end\n\n    function _random_number(num, mul)\n        value = []\n        j = 0\n        rand = 0\n        while j <= num+1\n            rand = rand() * mul\n            append!(value, [rand])\n            j += 1\n        end\n        return value\n    end\n\n    dates = random_dates(DateTime(2001, 1, 1), DateTime(2005, 12, 31), 50)\n\n    trace1 = scatter(;x=dates,\n                     y=20.0 .* rand(50),\n                     line_width=0,\n                     marker_color=\"444\",\n                     mode=\"lines\",\n                     name=\"Lower Bound\")\n\n    trace2 = scatter(;x=dates,\n                     y=21.0 .* rand(50),\n                     fill=\"tonexty\",\n                     fillcolor=\"rgba(68, 68, 68, 0.3)\",\n                     line_color=\"rgb(31, 119, 180)\",\n                     mode=\"lines\",\n                     name=\"Measurement\")\n\n    trace3 = scatter(;x=dates,\n                     y=22.0 .* rand(50),\n                     fill=\"tonexty\",\n                     fillcolor=\"rgba(68, 68, 68, 0.3)\",\n                     line_width=0,\n                     marker_color=\"444\",\n                     mode=\"lines\",\n                     name=\"Upper Bound\")\n\n    data = [trace1, trace2, trace3]\n    t = \"Continuous, variable value error bars<br> Notice the hover text!\"\n    layout = Layout(;title=t, yaxis_title=\"Wind speed (m/s)\")\n    plot(data, layout)\nend\nerrorbars2()","category":"page"},{"location":"examples/heatmaps/#Heatmaps","page":"Heatmaps","title":"Heatmaps","text":"","category":"section"},{"location":"examples/heatmaps/","page":"Heatmaps","title":"Heatmaps","text":"using PlotlyJS, Random\nRandom.seed!(42)","category":"page"},{"location":"examples/heatmaps/","page":"Heatmaps","title":"Heatmaps","text":"function heatmap1()\n    plot(heatmap(z=[1 20 30; 20 1 60; 30 60 1]))\nend\nheatmap1()","category":"page"},{"location":"examples/heatmaps/","page":"Heatmaps","title":"Heatmaps","text":"function heatmap2()\n    trace = heatmap(\n        x=[\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"],\n        y=[\"Morning\", \"Afternoon\", \"Evening\"],\n        z=rand(1:30, 5, 3)\n    )\n    plot(trace)\nend\nheatmap2()","category":"page"},{"location":"api/#API-Documentation","page":"API Docs","title":"API Documentation","text":"","category":"section"},{"location":"api/","page":"API Docs","title":"API Docs","text":"Modules = [PlotlyBase, PlotlyJS]\nOrder   = [:function, :type]","category":"page"},{"location":"api/#Base.size-Tuple{Plot}","page":"API Docs","title":"Base.size","text":"size(::PlotlyBase.Plot)\n\nReturn the size of the plot in pixels. Obtained from the layout.width and layout.height fields.\n\n\n\n\n\n","category":"method"},{"location":"api/#PlotlyBase.addtraces!-Tuple{Plot,Int64,Vararg{AbstractTrace,N} where N}","page":"API Docs","title":"PlotlyBase.addtraces!","text":"addtraces!(p::Plot, i::Int, traces::AbstractTrace...)\n\nAdd trace(s) at a specified location in the Plot's array of data.\n\nThe new traces will start at index p.data[i]\n\n\n\n\n\n","category":"method"},{"location":"api/#PlotlyBase.addtraces!-Tuple{Plot,Vararg{AbstractTrace,N} where N}","page":"API Docs","title":"PlotlyBase.addtraces!","text":"addtraces!(p::Plot, traces::AbstractTrace...)\n\nAdd trace(s) to the end of the Plot's array of data\n\n\n\n\n\n","category":"method"},{"location":"api/#PlotlyBase.circle","page":"API Docs","title":"PlotlyBase.circle","text":"Draw a circle from ((x0+x1)/2, (y0+y1)/2)) with radius  (|(x0+x1)/2 - x0|, |(y0+y1)/2 -y0)|) \n\n\n\n\n\n","category":"function"},{"location":"api/#PlotlyBase.deletetraces!-Tuple{Plot,Vararg{Int64,N} where N}","page":"API Docs","title":"PlotlyBase.deletetraces!","text":"deletetraces!(p::Plot, inds::Int...) =\n\nRemove the traces at the specified indices\n\n\n\n\n\n","category":"method"},{"location":"api/#PlotlyBase.extendtraces!","page":"API Docs","title":"PlotlyBase.extendtraces!","text":"extendtraces!(::Plot, ::Dict{Union{Symbol,AbstractString},AbstractVector{Vector{Any}}}), indices, maxpoints)\n\nExtend one or more traces with more data. A few notes about the structure of the update dict are important to remember:\n\nThe keys of the dict should be of type Symbol or AbstractString specifying the trace attribute to be updated. These attributes must already exist in the trace\nThe values of the dict must be a Vector of Vector of data. The outer index tells Plotly which trace to update, whereas the Vector at that index contains the value to be appended to the trace attribute.\n\nThese concepts are best understood by example:\n\n# adds the values [1, 3] to the end of the first trace's y attribute and doesn't\n# remove any points\nextendtraces!(p, Dict(:y=>Vector[[1, 3]]), [1], -1)\nextendtraces!(p, Dict(:y=>Vector[[1, 3]]))  # equivalent to above\n\n# adds the values [1, 3] to the end of the third trace's marker.size attribute\n# and [5,5,6] to the end of the 5th traces marker.size -- leaving at most 10\n# points per marker.size attribute\nextendtraces!(p, Dict(\"marker.size\"=>Vector[[1, 3], [5, 5, 6]]), [3, 5], 10)\n\n\n\n\n\n","category":"function"},{"location":"api/#PlotlyBase.hline","page":"API Docs","title":"PlotlyBase.hline","text":"hline(y, fields::AbstractDict=Dict{Symbol,Any}(); kwargs...)\n\nDraw horizontal lines at each point in y that span the width of the plot\n\n\n\n\n\n","category":"function"},{"location":"api/#PlotlyBase.line","page":"API Docs","title":"PlotlyBase.line","text":"Draw a line through the points (x0, y0) and (x1, y2)\n\n\n\n\n\n","category":"function"},{"location":"api/#PlotlyBase.movetraces!-Tuple{Plot,AbstractArray{Int64,1},AbstractArray{Int64,1}}","page":"API Docs","title":"PlotlyBase.movetraces!","text":"movetraces!(p::Plot, src::AbstractVector{Int}, dest::AbstractVector{Int})\n\nMove traces from indices src to indices dest.\n\nBoth src and dest must be Vector{Int}\n\n\n\n\n\n","category":"method"},{"location":"api/#PlotlyBase.movetraces!-Tuple{Plot,Vararg{Int64,N} where N}","page":"API Docs","title":"PlotlyBase.movetraces!","text":"movetraces!(p::Plot, to_end::Int...)\n\nMove one or more traces to the end of the data array\"\n\n\n\n\n\n","category":"method"},{"location":"api/#PlotlyBase.path-Tuple{AbstractString}","page":"API Docs","title":"PlotlyBase.path","text":"Draw an arbitrary svg path\n\n\n\n\n\n","category":"method"},{"location":"api/#PlotlyBase.prependtraces!","page":"API Docs","title":"PlotlyBase.prependtraces!","text":"prependtraces!(p::Plot, update::AbstractDict, indices::AbstractVector{Int}=[1],\n                maxpoints=-1)\n\nThe API for prependtraces is equivalent to that for extendtraces except that the data is added to the front of the traces attributes instead of the end. See Those docstrings for more information\n\n\n\n\n\n","category":"function"},{"location":"api/#PlotlyBase.rect","page":"API Docs","title":"PlotlyBase.rect","text":"Draw a rectangle linking (x0,y0), (x1,y0), (x1,y1), (x0,y1), (x0,y0)\n\n\n\n\n\n","category":"function"},{"location":"api/#PlotlyBase.relayout!","page":"API Docs","title":"PlotlyBase.relayout!","text":"relayout!(l::Layout, update::AbstractDict=Dict(); kwargs...)\n\nUpdate l using update dict and/or kwargs\n\n\n\n\n\n","category":"function"},{"location":"api/#PlotlyBase.relayout!-Tuple{Plot,Vararg{Any,N} where N}","page":"API Docs","title":"PlotlyBase.relayout!","text":"relayout!(p::Plot, update::AbstractDict=Dict(); kwargs...)\n\nUpdate p.layout on using update dict and/or kwargs\n\n\n\n\n\n","category":"method"},{"location":"api/#PlotlyBase.restyle!","page":"API Docs","title":"PlotlyBase.restyle!","text":"restyle!(p::Plot, update::AbstractDict=Dict(); kwargs...)\n\nUpdate all traces using update dict and/or kwargs\n\n\n\n\n\n","category":"function"},{"location":"api/#PlotlyBase.restyle!-2","page":"API Docs","title":"PlotlyBase.restyle!","text":"The restyle! method follows the semantics of the Plotly.restyle function in plotly.js. Specifically the following rules are applied when trying to set an attribute k to a value v on trace ind, which happens to be the ith trace listed in the vector of inds (if ind is a scalar then i is always equal to 1)\n\nif v is an array or a tuple (both translated to javascript arrays when\n\njson(v) is called) then p.data[ind][k] will be set to v[i]. See examples below\n\nif v is any other type (any scalar type), then k is set directly to v.\n\nExamples\n\n# set marker color on first two traces to be red\nrestyle!(p, [1, 2], marker_color=\"red\")\n\n# set marker color on trace 1 to be green and trace 2 to be red\nrestyle!(p, [2, 1], marker_color=[\"red\", \"green\"])\n\n# set marker color on trace 1 to be red. green is not used\nrestyle!(p, 1, marker_color=[\"red\", \"green\"])\n\n# set the first marker on trace 1 to red, the second marker on trace 1 to green\nrestyle!(p, 1, marker_color=([\"red\", \"green\"],))\n\n# suppose p has 3 traces.\n# sets marker color on trace 1 to [\"red\", \"green\"]\n# sets marker color on trace 2 to \"blue\"\n# sets marker color on trace 3 to [\"red\", \"green\"]\nrestyle!(p, 1:3, marker_color=([\"red\", \"green\"], \"blue\"))\n\n\n\n\n\n","category":"function"},{"location":"api/#PlotlyBase.restyle!-3","page":"API Docs","title":"PlotlyBase.restyle!","text":"restyle!(gt::GenericTrace, i::Int=1, update::AbstractDict=Dict(); kwargs...)\n\nUpdate trace gt using dict/kwargs, assuming it was the ith ind in a call to restyle!(::Plot, ...)\n\n\n\n\n\n","category":"function"},{"location":"api/#PlotlyBase.restyle!-4","page":"API Docs","title":"PlotlyBase.restyle!","text":"restyle!(::Plot, ::AbstractVector{Int}, ::AbstractDict=Dict(); kwargs...)\n\nUpdate specific traces at p.data[inds] using update dict and/or kwargs\n\n\n\n\n\n","category":"function"},{"location":"api/#PlotlyBase.restyle!-5","page":"API Docs","title":"PlotlyBase.restyle!","text":"restyle!(p::Plot, ind::Int=1, update::AbstractDict=Dict(); kwargs...)\n\nUpdate p.data[ind] using update dict and/or kwargs\n\n\n\n\n\n","category":"function"},{"location":"api/#PlotlyBase.savefig-Tuple{IO,Plot}","page":"API Docs","title":"PlotlyBase.savefig","text":"savefig(\n    io::IO,\n    p::Plot;\n    width::Union{Nothing,Int}=nothing,\n    height::Union{Nothing,Int}=nothing,\n    scale::Union{Nothing,Real}=nothing,\n    format::String=\"png\"\n)\n\nSave a plot p to the io stream io. They keyword argument format determines the type of data written to the figure and must be one of png, jpeg, webp, svg, pdf, eps, json, or html. scale sets the image scale. width and height set the dimensions, in pixels. Defaults are taken from p.layout, or supplied by plotly\n\n\n\n\n\n","category":"method"},{"location":"api/#PlotlyBase.savefig-Tuple{Plot,AbstractString}","page":"API Docs","title":"PlotlyBase.savefig","text":"savefig(\n    p::Plot, fn::AbstractString;\n    format::Union{Nothing,String}=nothing,\n    width::Union{Nothing,Int}=nothing,\n    height::Union{Nothing,Int}=nothing,\n    scale::Union{Nothing,Real}=nothing,\n)\n\nSave a plot p to a file named fn. If format is given and is one of png, jpeg, webp, svg, pdf, eps, json, or html; it will be the format of the file. By default the format is guessed from the extension of fn. scale sets the image scale. width and height set the dimensions, in pixels. Defaults are taken from p.layout, or supplied by plotly\n\n\n\n\n\n","category":"method"},{"location":"api/#PlotlyBase.sizes","page":"API Docs","title":"PlotlyBase.sizes","text":"Given the number of rows and columns, return an NTuple{4,Float64} containing (width, height, vspace, hspace), where width and height are the width and height of each subplot and vspace and hspace are the vertical and horizonal spacing between subplots, respectively.\n\n\n\n\n\n","category":"function"},{"location":"api/#PlotlyBase.stem-Tuple{}","page":"API Docs","title":"PlotlyBase.stem","text":"stem(; y, stem_color, stem_thickness, kwargs...)\n\n\nCreates a \"stem\" or \"lollipop\" trace. It is implemented using plotly.js's scatter type, using the error bars to draw the stem.\n\nKeyword Arguments:\n\nAll properties accepted by scatter except error_y, which is used to draw   the stems\nstem_color - sets the color of the stems\nstem_thickness - sets the thickness of the stems\n\n\n\n\n\n","category":"method"},{"location":"api/#PlotlyBase.trace_map","page":"API Docs","title":"PlotlyBase.trace_map","text":"trace_map(p::Plot, axis::Symbol=:x)\n\nReturn an array of length(p.data) that maps each element of p.data into an integer for which number axis of kind axis that trace belogs to. axis can either be x or y. If x is given, return the integer for which x-axis the trace belongs to. Similar for y.\n\n\n\n\n\n","category":"function"},{"location":"api/#PlotlyBase.update!","page":"API Docs","title":"PlotlyBase.update!","text":"Apply both restyle! and relayout! to the plot. Layout arguments are specified by passing an instance of Layout to the layout keyword argument.\n\nThe update Dict (optional) and all keyword arguments will be passed to restyle\n\nExample\n\njulia> p = Plot([scatter(y=[1, 2, 3])], Layout(yaxis_title=\"this is y\"));\n\njulia> print(json(p, 2))\n{\n  \"layout\": {\n    \"margin\": {\n      \"l\": 50,\n      \"b\": 50,\n      \"r\": 50,\n      \"t\": 60\n    },\n    \"yaxis\": {\n      \"title\": \"this is y\"\n    }\n  },\n  \"data\": [\n    {\n      \"y\": [\n        1,\n        2,\n        3\n      ],\n      \"type\": \"scatter\"\n    }\n  ]\n}\n\njulia> update!(p, Dict(:marker => Dict(:color => \"red\")), layout=Layout(title=\"this is a title\"), marker_symbol=\"star\");\n\njulia> print(json(p, 2))\n{\n  \"layout\": {\n    \"margin\": {\n      \"l\": 50,\n      \"b\": 50,\n      \"r\": 50,\n      \"t\": 60\n    },\n    \"yaxis\": {\n      \"title\": \"this is y\"\n    },\n    \"title\": \"this is a title\"\n  },\n  \"data\": [\n    {\n      \"y\": [\n        1,\n        2,\n        3\n      ],\n      \"type\": \"scatter\",\n      \"marker\": {\n        \"color\": \"red\",\n        \"symbol\": \"star\"\n      }\n    }\n  ]\n}\n\n\n\n\n\n","category":"function"},{"location":"api/#PlotlyBase.vline","page":"API Docs","title":"PlotlyBase.vline","text":"vline(x, fields::AbstractDict=Dict{Symbol,Any}(); kwargs...)\n\nDraw vertical lines at each point in x that span the height of the plot\n\n\n\n\n\n","category":"function"},{"location":"api/#PlotlyBase.GenericTrace-Tuple{AbstractDataFrame,Symbol,Symbol}","page":"API Docs","title":"PlotlyBase.GenericTrace","text":"GenericTrace(df, x, y; kwargs...)\n\n\nPass the provided values of x and y as keyword arguments for constructing the trace from df. See other method for more information\n\n\n\n\n\n","category":"method"},{"location":"api/#PlotlyBase.GenericTrace-Tuple{AbstractDataFrame,Symbol}","page":"API Docs","title":"PlotlyBase.GenericTrace","text":"GenericTrace(df, y; kwargs...)\n\n\nPass the provided value y as keyword argument for constructing the trace from df. See other method for more information\n\n\n\n\n\n","category":"method"},{"location":"api/#PlotlyBase.GenericTrace-Tuple{AbstractDataFrame}","page":"API Docs","title":"PlotlyBase.GenericTrace","text":"GenericTrace(df; group, kind, kwargs...)\n\n\nBuild a trace of kind kind, using the columns of df where possible. In particular for all keyword arguments, if the value of the keyword argument is a Symbol and matches one of the column names of df, replace the value of the keyword argument with the column of df\n\nIf group is passed and is a Symbol that is one of the column names of df, then call by(df, group) and construct one trace per SubDataFrame, passing all other keyword arguments. This means all keyword arguments are passed applied to all traces\n\nAlso, when using this routine you can pass a function as a value for any keyword argument. This function will be replaced by calling the function on the DataFrame. For example, if I were to pass name=(df) -> \"Wage (average = $(mean(df[!, :X1])))\" then the name attribute on the trace would be replaced by the  Wage (average = XX), where XX is the average of the X1 column in the DataFrame.\n\nThe ability to pass functions as values for keyword arguments is particularly useful when using the group keyword arugment, as the function will be applied to each SubDataFrame. In the example above, the name attribute would set a different mean for each group.\n\n\n\n\n\n","category":"method"},{"location":"api/#PlotlyBase.Plot","page":"API Docs","title":"PlotlyBase.Plot","text":"Plot(d, x, y)\nPlot(d, x, y, l; style, kwargs...)\n\n\nConstruct a plot from df, passing the provided values of x and y as keyword arguments. See docstring for other method for more information.\n\n\n\n\n\n","category":"type"},{"location":"api/#PlotlyBase.Plot-2","page":"API Docs","title":"PlotlyBase.Plot","text":"Plot(d, y)\nPlot(d, y, l; style, kwargs...)\n\n\nConstruct a plot from df, passing the provided value y as a keyword argument. See docstring for other method for more information.\n\n\n\n\n\n","category":"type"},{"location":"api/#PlotlyBase.Plot-3","page":"API Docs","title":"PlotlyBase.Plot","text":"Plot(fs, x0, x1)\nPlot(fs, x0, x1, l; style, kwargs...)\n\n\nFor each function in f in fs, construct a scatter trace that plots f from x0 to x1, using the layout l. All keyword arguments are applied to all constructed traces.\n\n\n\n\n\n","category":"type"},{"location":"api/#PlotlyBase.Plot-4","page":"API Docs","title":"PlotlyBase.Plot","text":"Plot(df)\nPlot(df, l; style, kwargs...)\n\n\nConstruct a plot using the columns of df if possible. For each keyword argument, if the value of the argument is a Symbol and the df has a column whose name matches the value, replace the value with the column of the df.\n\nIf group is passed and is a Symbol that is one of the column names of df, then call by(df, group) and construct one trace per SubDataFrame, passing all other keyword arguments. This means all keyword arguments are passed applied to all traces\n\n\n\n\n\n","category":"type"},{"location":"api/#PlotlyBase.Plot-5","page":"API Docs","title":"PlotlyBase.Plot","text":"Plot(f, x0, x1)\nPlot(f, x0, x1, l; style, kwargs...)\n\n\nConstruct a plot of f from x0 to x1, using the layout l. All keyword arguments are applied to the constructed trace.\n\n\n\n\n\n","category":"type"},{"location":"api/#PlotlyBase.Plot-Union{Tuple{AbstractArray{T,N} where N}, Tuple{T}, Tuple{AbstractArray{T,N} where N,Layout}} where T<:Union{Date, DateTime, AbstractString, Number, Symbol}","page":"API Docs","title":"PlotlyBase.Plot","text":"Plot(y)\nPlot(y, l; kwargs...)\n\n\nBuild a scatter plot and set  y to y. All keyword arguments are passed directly as keyword arguments to the constructed scatter.\n\n\n\n\n\n","category":"method"},{"location":"api/#PlotlyBase.Plot-Union{Tuple{T}, Tuple{AbstractArray{T,1},AbstractArray{T,1} where T}, Tuple{AbstractArray{T,1},AbstractArray{T,1} where T,Layout}} where T<:Union{Date, DateTime, AbstractString, Number, Symbol}","page":"API Docs","title":"PlotlyBase.Plot","text":"Plot(x, y)\nPlot(x, y, l; kind, style, kwargs...)\n\n\nBuild a plot of with one trace of type kindand set x to x and y to y. All keyword arguments are passed directly as keyword arguments to the constructed trace.\n\nNOTE: If y is a matrix, one trace is constructed for each column of y\n\nNOTE: If x and y are both matrices, they must have the same number of columns (say N). Then N traces are constructed, where the ith column of x is paired with the ith column of y.\n\n\n\n\n\n","category":"method"},{"location":"api/#PlotlyBase.savehtml","page":"API Docs","title":"PlotlyBase.savehtml","text":"PlotlyBase.savehtml(io::IO, p::Union{Plot,SyncPlot}, js::Symbol=js_default[])\nPlotlyBase.savehtml(p::Union{Plot,SyncPlot}, fn::AbstractString, js::Symbol=js_default[])\n\nSave plot to standalone html file suitable for including in a website or opening in a browser\n\nCan either be written to an arbitrary IO stream, or saved to a file noted with a string fn.\n\nThe js argument can be one of\n\n:local: Reference the local plotly.js file included in this Julia package   Pros: small file size, offline viewing. Cons: Can't share with others or   move to different machine..\n:remote: Reference plotly.js from a CDN. Pros small file size, move to   other machine. Cons: need internet access to fetch from CDN\n:embed: Embed the entirety of your local copy of plotly.js in the   outputted file. Pros: offline viewing, move to other machine. Con: large   file size (adds about 2.7 MB)\n\nThe default is :local\n\n\n\n\n\n","category":"function"},{"location":"building_traces_layouts/#Building-Blocks","page":"Building Blocks","title":"Building Blocks","text":"","category":"section"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"using PlotlyJS, JSON","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"Recall that the Plotly.newPlot javascript function expects to receive an array of trace objects and, optionally, a layout object. In this section we will learn how to build these object in Julia.","category":"page"},{"location":"building_traces_layouts/#Traces","page":"Building Blocks","title":"Traces","text":"","category":"section"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"A Plot instance will have a vector of traces. These should each be a subtype of AbstractTrace.","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"PlotlyJS.jl defines one such subtype:","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"mutable struct GenericTrace{T<:AbstractDict{Symbol,Any}} <: AbstractTrace\n    kind::ASCIIString\n    fields::T\nend","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"The kind field specifies the type of trace and the fields is an AbstractDict object that maps trace attributes to their values.","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"Let's consider an example. Suppose we would like to build the following JSON object:","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"{\n  \"type\": \"scatter\",\n  \"x\": [1, 2, 3, 4, 5],\n  \"y\": [1, 6, 3, 6, 1],\n  \"mode\": \"markers+text\",\n  \"name\": \"Team A\",\n  \"text\": [\"A-1\", \"A-2\", \"A-3\", \"A-4\", \"A-5\"],\n  \"textposition\": \"top center\",\n  \"textfont\": {\n    \"family\":  \"Raleway, sans-serif\"\n  },\n  \"marker\": { \"size\": 12 }\n}","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"One way to do this in Julia is:","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"fields = Dict{Symbol,Any}(:type => \"scatter\",\n                          :x => [1, 2, 3, 4, 5],\n                          :y => [1, 6, 3, 6, 1],\n                          :mode => \"markers+text\",\n                          :name => \"Team A\",\n                          :text => [\"A-1\", \"A-2\", \"A-3\", \"A-4\", \"A-5\"],\n                          :textposition => \"top center\",\n                          :textfont => Dict(:family =>  \"Raleway, sans-serif\"),\n                          :marker => Dict(:size => 12))\nGenericTrace(\"scatter\", fields)","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"A more convenient syntax is:","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"using PlotlyJS, JSON","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"t1 = scatter(;x=[1, 2, 3, 4, 5],\n              y=[1, 6, 3, 6, 1],\n              mode=\"markers+text\",\n              name=\"Team A\",\n              text=[\"A-1\", \"A-2\", \"A-3\", \"A-4\", \"A-5\"],\n              textposition=\"top center\",\n              textfont_family=\"Raleway, sans-serif\",\n              marker_size=12)","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"Notice a few things:","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"The trace type became the function name. There is a similar method for all","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"plotly.js traces types.","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"All other trace attributes were set using keyword arguments. This allows us","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"to avoid typing out the symbol prefix (:) and the arrows (=>) that were necessary when constructing the Dict","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"We can set nested attributes using underscores. Notice that the JSON","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"\"marker\": { \"size\": 12 } was written marker_size=12.","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"We can verify that this is indeed equivalent JSON by printing the JSON: (note the order of the attributes is different, but the content is identical):","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"print(JSON.json(t1, 2))","category":"page"},{"location":"building_traces_layouts/#Accessing-attributes","page":"Building Blocks","title":"Accessing attributes","text":"","category":"section"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"If we then wanted to extract a particular attribute, we can do so using getindex(t1, :attrname), or the syntactic sugar t1[:attrname]. Note that both symbols and strings can be used in a call to getindex:","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"t1[\"marker\"]\nt1[:marker]","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"To access a nested property use parent.child","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"t1[\"textfont.family\"]","category":"page"},{"location":"building_traces_layouts/#Setting-additional-attributes","page":"Building Blocks","title":"Setting additional attributes","text":"","category":"section"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"We can also set additional attributes. Suppose we wanted to set marker.color to be red. We can do this with a call to setindex!(t1, \"red\", :marker_color), or equivalently t1[\"marker_color\"] = \"red\":","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"t1[\"marker_color\"] = \"red\"\n\nprintln(JSON.json(t1, 2))","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"Notice how the color attribute was correctly added within the existing marker attribute (alongside size), instead of replacing the marker attribute.","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"You can also use this syntax to add completely new nested attributes:","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"t1[\"line_width\"] = 5\nprintln(JSON.json(t1, 2))","category":"page"},{"location":"building_traces_layouts/#Layouts","page":"Building Blocks","title":"Layouts","text":"","category":"section"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"The Layout type is defined as","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"mutable struct Layout{T<:AbstractDict{Symbol,Any}} <: AbstractLayout\n    fields::T\nend","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"You can construct a layout using the same convenient keyword argument syntax that we used for traces:","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"l = Layout(;title=\"Penguins\",\n            xaxis_range=[0, 42.0], xaxis_title=\"fish\",\n            yaxis_title=\"Weight\",\n            xaxis_showgrid=true, yaxis_showgrid=true,\n            legend_y=1.15, legend_x=0.7)\nprintln(JSON.json(l, 2))","category":"page"},{"location":"building_traces_layouts/#attr","page":"Building Blocks","title":"attr","text":"","category":"section"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"There is a special function named attr that allows you to apply the same keyword magic we saw in the trace and layout functions, but to nested attributes. Let's revisit the previous example, but use attr to build up our xaxis and legend:","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"l2 = Layout(;title=\"Penguins\",\n             xaxis=attr(range=[0, 42.0], title=\"fish\", showgrid=true),\n             yaxis_title=\"Weight\", yaxis_showgrid=true,\n             legend=attr(x=0.7, y=1.15))\nprintln(JSON.json(l2, 2))","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"Notice we got the exact same output as before, but we didn't have to resort to building the Dict by hand or prefixing multiple arguments with xaxis_ or legend_.","category":"page"},{"location":"building_traces_layouts/#Using-DataFrames","page":"Building Blocks","title":"Using DataFrames","text":"","category":"section"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"note: Note\nNew in version 0.6.0","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"You can also construct traces using the columns of any subtype of AbstractDataFrame (e.g. the DataFrame type from DataFrames.jl).","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"To demonstrate this functionality let's load the famous iris data set:","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"using DataFrames, RDatasets\niris = dataset(\"datasets\", \"iris\");\nfirst(iris, 10)","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"Suppose that we wanted to construct a scatter trace with the  SepalLength column as the x variable and the SepalWidth columns as the y variable. We do this by calling","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"my_trace = scatter(iris, x=:SepalLength, y=:SepalWidth, marker_color=:red)\n[my_trace[:x][1:5] my_trace[:y][1:5]]\nmy_trace[:marker_color]","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"How does this work? The basic rule is that if the value of any keyword argument is a Julia Symbol (i.e. created with :something), then the function creating the trace checks if that symbol is one of the column names in the DataFrame. If so, it extracts the column from the DataFrame and sets that as the value for the keyword argument. Otherwise it passes the symbol directly through.","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"In the above example, when we constructed my_trace the value of the keyword argument x was set to the Symbol :SepalLength. This did match a column name from iris so that column was extracted and replaced :SepalLength as the value for the x argument. The same holds for y and SepalWidth.","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"However, when setting marker_color=:red we found that :red is not one of the column names, so the value for the marker_color keyword argument remained :red.","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"The DataFrame interface becomes more useful when constructing whole plots. See the convenience methods section of the documentation for more information.","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"note: Note\nNew in version 0.9.0","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"As of version 0.9.0, you can construct groups of traces using the DataFrame api. This is best understood by example, so let's see it in action:","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"iris = dataset(\"datasets\", \"iris\");\nunique(iris[:Species])\ntraces = scatter(\n    iris, group=:Species, x=:SepalLength, y=:SepalWidth, mode=\"markers\", marker_size=8\n)\n[t[:name] for t in traces]","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"Notice how there are three Species in the iris DataFrame, and when passing group=:Species to scatter we obtained three traces.","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"We can pass a Vector{Symbol} as group, to split the data on the value in more than one column:","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"tips = dataset(\"reshape2\", \"tips\");\nunique(tips[:Sex])\nunique(tips[:Day])\ntraces = violin(tips, group=[:Sex, :Day], x=:TotalBill, orientation=\"h\")\n[t[:name] for t in traces]","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"Also new in version 0.9.0, when using the DataFrame API you are allowed to pass a function as the value for a keyword argument. When the each trace is constructed, the value will be replaced by calling the function on whatever DataFrame is being used. When used in conjunction with the group argument, this allows you to compute group specific trace attributes on the fly.","category":"page"},{"location":"building_traces_layouts/","page":"Building Blocks","title":"Building Blocks","text":"See the docstring for GenericTrace and the violin_side_by_side example on the Violin example page more details.","category":"page"},{"location":"examples/subplots/#Subplots","page":"Subplots","title":"Subplots","text":"","category":"section"},{"location":"examples/subplots/","page":"Subplots","title":"Subplots","text":"using PlotlyJS, Dates\ninclude(\"../../../examples/line_scatter.jl\")","category":"page"},{"location":"examples/subplots/","page":"Subplots","title":"Subplots","text":"function subplots1()\n    p1 = linescatter1()\n    p2 = linescatter2()\n    p = [p1 p2]\n    p\nend\nsubplots1()","category":"page"},{"location":"examples/subplots/","page":"Subplots","title":"Subplots","text":"function subplots2()\n    p1 = linescatter1()\n    p2 = linescatter2()\n    p = [p1, p2]\n    p\nend\nsubplots2()","category":"page"},{"location":"examples/subplots/","page":"Subplots","title":"Subplots","text":"function subplots3()\n    p1 = linescatter6()\n    p2 = linescatter2()\n    p3 = linescatter3()\n    p4 = batman()\n    p = [p1 p2; p3 p4]\n    p.plot.layout[\"showlegend\"] = false\n    p.plot.layout[\"width\"] = 1000\n    p.plot.layout[\"height\"] = 600\n    p\nend\nsubplots3()","category":"page"},{"location":"examples/subplots/","page":"Subplots","title":"Subplots","text":"function subplots_withcomprehension()\n    hcat([plot(scatter(x = 1:5, y = rand(5))) for i in 1:3]...)\nend\nsubplots_withcomprehension()","category":"page"},{"location":"examples/subplots/","page":"Subplots","title":"Subplots","text":"function subplots_withsharedaxes()\n    data =  [\n    scatter(x=1:3, y=2:4),\n    scatter(x=20:10:40, y=fill(5, 3), xaxis=\"x2\", yaxis=\"y\"),\n    scatter(x=2:4, y=600:100:800, xaxis=\"x\", yaxis=\"y3\"),\n    scatter(x=4000:1000:6000, y=7000:1000:9000, xaxis=\"x4\", yaxis=\"y4\")\n    ]\n    layout = Layout(\n        xaxis_domain=[0, 0.45],\n        yaxis_domain=[0, 0.45],\n        xaxis4=attr(domain=[0.55, 1.0], anchor=\"y4\"),\n        xaxis2_domain=[0.55, 1],\n        yaxis3_domain=[0.55, 1],\n        yaxis4=attr(domain=[0.55, 1], anchor=\"x4\")    \n    )\n    plot(data, layout)\nend\nsubplots_withsharedaxes()","category":"page"},{"location":"examples/contour/#Contour","page":"Contour","title":"Contour","text":"","category":"section"},{"location":"examples/contour/","page":"Contour","title":"Contour","text":"using PlotlyJS","category":"page"},{"location":"examples/contour/","page":"Contour","title":"Contour","text":"function contour1()\n    x = y = [-2*pi + 4*pi*i/100 for i in 1:100]\n    z = [sin(x[i]) * cos(y[j]) * sin(x[i]*x[i]+y[j]*y[j])/log(x[i]*x[i]+y[j]*y[j]+1)\n         for i in 1:100 for j in 1:100]\n    z_ = [z[i:i+99] for i in 1:100:10000]\n\n    data = contour(;z=z_, x=x, y=y)\n\n    plot(data)\nend\ncontour1()","category":"page"},{"location":"examples/contour/","page":"Contour","title":"Contour","text":"function contour2()\n    z =  [10     10.625  12.5  15.625  20\n         5.625  6.25    8.125 11.25   15.625\n         2.5    3.125   5.    8.125   12.5\n         0.625  1.25    3.125 6.25    10.625\n         0      0.625   2.5   5.625   10]\n    data = contour(;z=z)\n\n    layout = Layout(;title=\"Basic Contour Plot\")\n    plot(data, layout)\nend\ncontour2()","category":"page"},{"location":"examples/contour/","page":"Contour","title":"Contour","text":"function contour3()\n    x = [-9, -6, -5 , -3, -1]\n    y = [0, 1, 4, 5, 7]\n    z = [10     10.625  12.5  15.625  20\n         5.625  6.25    8.125 11.25   15.625\n         2.5    3.125   5.    8.125   12.5\n         0.625  1.25    3.125 6.25    10.625\n         0      0.625   2.5   5.625   10]\n    trace = contour(x=x, y=y, z=z)\n\n    layout = Layout(title=\"Setting the X and Y Coordinates in a Contour Plot\")\n    plot(trace, layout)\nend\ncontour3()","category":"page"},{"location":"examples/contour/","page":"Contour","title":"Contour","text":"function contour4()\n    z = [10     10.625  12.5  15.625  20\n         5.625  6.25    8.125 11.25   15.625\n         2.5    3.125   5.    8.125   12.5\n         0.625  1.25    3.125 6.25    10.625\n         0      0.625   2.5   5.625   10]\n    data = contour(;z=z, colorscale=\"Jet\")\n\n    layout = Layout(;title=\"Colorscale for Contour Plot\")\n    plot(data, layout)\nend\ncontour4()","category":"page"},{"location":"examples/contour/","page":"Contour","title":"Contour","text":"function contour5()\n    z = [10     10.625  12.5  15.625  20\n         5.625  6.25    8.125 11.25   15.625\n         2.5    3.125   5.    8.125   12.5\n         0.625  1.25    3.125 6.25    10.625\n         0      0.625   2.5   5.625   10]\n    data = contour(;z=z,\n                   colorscale=\"Jet\",\n                   autocontour=false,\n                   contours=Dict(:start=>0, :end=>8, :size=>2))\n\n    layout = Layout(;title=\"Customizing Size and Range of Contours\")\n    plot(data, layout)\nend\ncontour5()","category":"page"},{"location":"examples/contour/","page":"Contour","title":"Contour","text":"function contour6()\n    z = [10     10.625  12.5  15.625  20\n         5.625  6.25    8.125 11.25   15.625\n         2.5    3.125   5.    8.125   12.5\n         0.625  1.25    3.125 6.25    10.625\n         0      0.625   2.5   5.625   10]\n    data = contour(;z=z, colorscale=\"Jet\", dx=10, x0=5, dy=10, y0=10)\n\n    layout = Layout(;title=\"Customizing Spacing Between X and Y Axis Ticks\")\n\n    plot(data, layout)\nend\ncontour6()","category":"page"},{"location":"examples/contour/","page":"Contour","title":"Contour","text":"function contour7()\n    z = [NaN NaN NaN 12  13  14  15  16\n         NaN 1   NaN 11  NaN NaN NaN 17\n         NaN 2   6   7   NaN NaN NaN 18\n         NaN 3   NaN 8   NaN NaN NaN 19\n         5   4   10  9   NaN NaN NaN 20\n         NaN NaN NaN 27  NaN NaN NaN 21\n         NaN NaN NaN 26  25  24  23  22]'\n\n    p1 = plot(contour(;z=z, showscale=false))\n    p2 = plot(contour(;z=z, connectgaps=true, showscale=false))\n    p3 = plot(heatmap(;z=z, zsmooth=\"best\",showscale=false))\n    p4 = plot(heatmap(;z=z, zsmooth=\"best\", connectgaps=true, showscale=false))\n\n    p = [p1 p2; p3 p4]\n\n    relayout!(p, title=\"Connect the Gaps Between Null Values in the Z Matrix\")\n\n    p\nend\ncontour7()","category":"page"},{"location":"examples/contour/","page":"Contour","title":"Contour","text":"function contour8()\n    z = [2  4   7   12  13  14  15  16\n         3  1   6   11  12  13  16  17\n         4  2   7   7   11  14  17  18\n         5  3   8   8   13  15  18  19\n         7  4   10  9   16  18  20  19\n         9  10  5   27  23  21  21  21\n         11 14  17  26  25  24  23  22]\n\n    p1 = plot(contour(;z=z, line_smoothing=0))\n    p2 = plot(contour(;z=z, line_smoothing=0.85))\n\n    p = [p1 p2]\n\n    relayout!(p, title=\"Smoothing Contour Lines\")\n\n    p\nend\ncontour8()","category":"page"},{"location":"examples/contour/","page":"Contour","title":"Contour","text":"function contour9()\n    z = [10     10.625  12.5  15.625  20\n         5.625  6.25    8.125 11.25   15.625\n         2.5    3.125   5.    8.125   12.5\n         0.625  1.25    3.125 6.25    10.625\n         0      0.625   2.5   5.625   10]\n    data = contour(;z=z, contours_coloring=\"heatmap\")\n\n    layout = Layout(;title=\"Smooth Contour Coloring\")\n    plot(data, layout)\nend\ncontour9()","category":"page"},{"location":"examples/contour/","page":"Contour","title":"Contour","text":"function contour10()\n    z = [10     10.625  12.5  15.625  20\n         5.625  6.25    8.125 11.25   15.625\n         2.5    3.125   5.    8.125   12.5\n         0.625  1.25    3.125 6.25    10.625\n         0      0.625   2.5   5.625   10]\n    data = contour(;z=z, colorscale=\"Jet\", contours_coloring=\"lines\")\n\n    layout = Layout(;title=\"Contour Lines\")\n    plot(data, layout)\nend\ncontour10()","category":"page"},{"location":"examples/contour/","page":"Contour","title":"Contour","text":"function contour11()\n    z = [10     10.625  12.5  15.625  20\n         5.625  6.25    8.125 11.25   15.625\n         2.5    3.125   5.    8.125   12.5\n         0.625  1.25    3.125 6.25    10.625\n         0      0.625   2.5   5.625   10]\n   data = contour(;z=z,\n                  colorscale=[[0, \"rgb(166,206,227)\"],\n                              [0.25, \"rgb(31,120,180)\"],\n                              [0.45, \"rgb(178,223,138)\"],\n                              [0.64, \"rgb(51,160,44)\"],\n                              [0.85, \"rgb(251,154,153)\"],\n                              [1, \"rgb(227,26,28)\"]])\n\n   layout = Layout(;title=\"Custom Contour Plot Colorscale\")\n\n   plot(data, layout)\nend\ncontour11()","category":"page"},{"location":"examples/contour/","page":"Contour","title":"Contour","text":"function contour12()\n    z = [10     10.625  12.5  15.625  20\n         5.625  6.25    8.125 11.25   15.625\n         2.5    3.125   5.    8.125   12.5\n         0.625  1.25    3.125 6.25    10.625\n         0      0.625   2.5   5.625   10]\n    data = contour(;z=z,\n                   colorbar=attr(;title=\"Color Bar Title\",titleside=\"right\",\n                                 titlefont=attr(;size=14,\n                                                family=\"Arial, sans-serif\")))\n\n    layout = Layout(;title=\"Colorbar with Title\")\n    plot(data,layout)\nend\ncontour12()","category":"page"},{"location":"examples/contour/","page":"Contour","title":"Contour","text":"function contour13()\n    z = [10     10.625  12.5  15.625  20\n         5.625  6.25    8.125 11.25   15.625\n         2.5    3.125   5.    8.125   12.5\n         0.625  1.25    3.125 6.25    10.625\n         0      0.625   2.5   5.625   10]\n    data = contour(;z=z,\n                   colorbar=attr(;thickness=75, thicknessmode=\"pixels\",\n                                 len=0.9, lenmode=\"fraction\",\n                                 outlinewidth=0))\n\n    layout = Layout(;title=\"Colorbar Size for Contour Plots\")\n    plot(data,layout)\nend\ncontour13()","category":"page"},{"location":"examples/contour/","page":"Contour","title":"Contour","text":"function contour14()\n    z = [10     10.625  12.5  15.625  20\n         5.625  6.25    8.125 11.25   15.625\n         2.5    3.125   5.    8.125   12.5\n         0.625  1.25    3.125 6.25    10.625\n         0      0.625   2.5   5.625   10]\n    data = contour(;z=z,\n                   colorbar=attr(;ticks=\"outside\", dtick=1,\n                                 tickwidth=2, ticklen=10,\n                                 tickcolor=\"grey\", showticklabels=true,\n                                 tickfont_size=15, xpad=50))\n\n    layout = Layout(;title=\"Styling Color Bar Ticks for Contour Plots\")\n    plot(data,layout)\nend\ncontour14()","category":"page"},{"location":"examples/histograms/#Histograms","page":"Histograms","title":"Histograms","text":"","category":"section"},{"location":"examples/histograms/","page":"Histograms","title":"Histograms","text":"using PlotlyJS","category":"page"},{"location":"examples/histograms/","page":"Histograms","title":"Histograms","text":"function two_hists()\n    x0 = randn(500)\n    x1 = x0 .+ 1\n\n    trace1 = histogram(x=x0, opacity=0.75)\n    trace2 = histogram(x=x1, opacity=0.75)\n    data = [trace1, trace2]\n    layout = Layout(barmode=\"overlay\")\n    plot(data, layout)\nend\ntwo_hists()","category":"page"},{"location":"syncplots/#Putting-it-Together","page":"Putting it together","title":"Putting it Together","text":"","category":"section"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"CurrentModule = PlotlyJS","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"We will now look at how to combine traces and a layout to create a plot.","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"We'll also discuss how to integrate with various frontends.","category":"page"},{"location":"syncplots/#Plot","page":"Putting it together","title":"Plot","text":"","category":"section"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"Recall that the definition of the Plot object is","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"mutable struct Plot{TT<:AbstractTrace}\n    data::Vector{TT}\n    layout::AbstractLayout\n    divid::Base.Random.UUID\nend","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"Given one or more AbstractTraces and optionally a Layout, we construct a Plot object with any of the following constructors","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"# A blank canvas no traces or a layout\nPlot()\n\n# A vector of traces and a layout\nPlot{T<:AbstractTrace}(data::AbstractVector{T}, layout::AbstractLayout)\n\n# A vector of traces -- default layout supplied\nPlot{T<:AbstractTrace}(data::AbstractVector{T})\n\n# a single trace: will be put into a vector -- default layout supplied\nPlot(data::AbstractTrace)\n\n# a single trace and a layout (trace put into a vector)\nPlot(data::AbstractTrace, layout::AbstractLayout)","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"Notice that none of the recommended constructors have you pass the divid field manually. This is an internal field used to allow the display and unique identification of multiple plots in a single web page.","category":"page"},{"location":"syncplots/#constructors","page":"Putting it together","title":"Convenience methods","text":"","category":"section"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"There are also a number of convenience methods to the Plot function that will attempt to construct the traces for you. They have the following signatures","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"PlotlyBase.Plot","category":"page"},{"location":"syncplots/#PlotlyBase.Plot","page":"Putting it together","title":"PlotlyBase.Plot","text":"Plot(x, y)\nPlot(x, y, l; kind, style, kwargs...)\n\n\nBuild a plot of with one trace of type kindand set x to x and y to y. All keyword arguments are passed directly as keyword arguments to the constructed trace.\n\nNOTE: If y is a matrix, one trace is constructed for each column of y\n\nNOTE: If x and y are both matrices, they must have the same number of columns (say N). Then N traces are constructed, where the ith column of x is paired with the ith column of y.\n\n\n\n\n\nPlot(y)\nPlot(y, l; kwargs...)\n\n\nBuild a scatter plot and set  y to y. All keyword arguments are passed directly as keyword arguments to the constructed scatter.\n\n\n\n\n\nPlot(f, x0, x1)\nPlot(f, x0, x1, l; style, kwargs...)\n\n\nConstruct a plot of f from x0 to x1, using the layout l. All keyword arguments are applied to the constructed trace.\n\n\n\n\n\nPlot(fs, x0, x1)\nPlot(fs, x0, x1, l; style, kwargs...)\n\n\nFor each function in f in fs, construct a scatter trace that plots f from x0 to x1, using the layout l. All keyword arguments are applied to all constructed traces.\n\n\n\n\n\nPlot(df)\nPlot(df, l; style, kwargs...)\n\n\nConstruct a plot using the columns of df if possible. For each keyword argument, if the value of the argument is a Symbol and the df has a column whose name matches the value, replace the value with the column of the df.\n\nIf group is passed and is a Symbol that is one of the column names of df, then call by(df, group) and construct one trace per SubDataFrame, passing all other keyword arguments. This means all keyword arguments are passed applied to all traces\n\n\n\n\n\nPlot(d, x, y)\nPlot(d, x, y, l; style, kwargs...)\n\n\nConstruct a plot from df, passing the provided values of x and y as keyword arguments. See docstring for other method for more information.\n\n\n\n\n\nPlot(d, y)\nPlot(d, y, l; style, kwargs...)\n\n\nConstruct a plot from df, passing the provided value y as a keyword argument. See docstring for other method for more information.\n\n\n\n\n\n","category":"type"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"Especially convenient is the group keyword argument when calling Plot(::AbstractDataFrame, ... ; ...). Here is an example below:","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"using PlotlyJS  # hide\nusing RDatasets\niris = dataset(\"datasets\", \"iris\");\np = Plot(iris, x=:SepalLength, y=:SepalWidth, mode=\"markers\", marker_size=8, group=:Species)","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"which would result in the following plot","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"p","category":"page"},{"location":"syncplots/#SyncPlots","page":"Putting it together","title":"SyncPlots","text":"","category":"section"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"A Plot is a pure Julia object and doesn't interact with plotly.js by itself. This means that we can't view the actual plotly figure the data represents.","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"To do that we need to link the Plot to one or more display frontends.","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"To actually connect to the display frontends we use the WebIO.jl package. Our interaction with WebIO is wrapped up in a type called SyncPlot that is defined as follows:","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"mutable struct SyncPlot\n    plot::PlotlyBase.Plot\n    scope::Scope\n    events::Dict\n    options::Dict\nend","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"As its name suggests, a SyncPlot will keep the Julia representation of the a plot (the Plot instance) in sync with a plot with a frontend.","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"note: Note\nThe Plot function will create a new Plot object and the plot function will create a new SyncPlot. The plot function passes all arguments (except the options keyword argument – see below) to construct a Plot and then sets up the display. All Plot methods are also defined for plot","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"By leveraging WebIO.jl we can render our figures anywhere WebIO can render. At time of writing this includes Jupyter notebooks, Jupyterlab, Mux.jl web apps, the Juno Julia environment inside the Atom text editor, and Electron windows from Blink.jl. Please see the WebIO.jl readme for additional (and up to date!) information.","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"When using PlotlyJS.jl at the Julia REPL a plot will automatically be displayed in an Electron window. This is a dedicated browser window we have full control over. To see a plot p, just type p by itself at the REPL and execute the line. Alternatively you can call display(p).","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"In addition to being able to see our charts in many front-end environments, WebIO also provides a 2-way communication bridge between javascript and Julia. In fact, when a SyncPlot is constructed, we automatically get listeners for all plotly.js javascript events. What's more is that we can hook up Julia functions as callbacks when those events are triggered. In the very contrived example below we have Julia print out details regarding points on a plot whenever a user hovers over them on the display:","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"using WebIO\np = plot(rand(10, 4));\ndisplay(p)  # usually optional\n\non(p[\"hover\"]) do data\n    println(\"\\nYou hovered over\", data)\nend","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"In this next example, whenever we click on a point we change its marker symbol to a star and marker color to gold:","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"using WebIO\ncolors = (fill(\"red\", 10), fill(\"blue\", 10))\nsymbols = (fill(\"circle\", 10), fill(\"circle\", 10))\nys = (rand(10), rand(10))\np = plot(\n    [scatter(y=y, marker=attr(color=c, symbol=s, size=15), line_color=c[1])\n    for (y, c, s) in zip(ys, colors, symbols)]\n)\ndisplay(p)  # usually optional\n\non(p[\"click\"]) do data\n    colors = (fill(\"red\", 10), fill(\"blue\", 10))\n    symbols = (fill(\"circle\", 10), fill(\"circle\", 10))\n    for point in data[\"points\"]\n        colors[point[\"curveNumber\"] + 1][point[\"pointIndex\"] + 1] = \"gold\"\n        symbols[point[\"curveNumber\"] + 1][point[\"pointIndex\"] + 1] = \"star\"\n    end\n    restyle!(p, marker_color=colors, marker_symbol=symbols)\nend","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"While completely nonsensical, hopefully these examples show you that it is possible to build rich, interactive, web-based data visualization applications with business logic implemented entirely in Julia!.","category":"page"},{"location":"syncplots/#Display-configuration","page":"Putting it together","title":"Display configuration","text":"","category":"section"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"When calling plot the options keyword argument is given special treatment. It should be an instance of AbstractDict and its contents are passed as display options to the plotly.js library. For details on which options are supported, see the plotly.js documentation on the subject.","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"As an example, if we were to execute the following code, we would see a static chart (no hover information or ability to zoom/pan) with 4 lines instead of an interactive one:","category":"page"},{"location":"syncplots/","page":"Putting it together","title":"Putting it together","text":"plot(rand(10, 4), options=Dict(:staticPlot => true))","category":"page"},{"location":"examples/area/#Area","page":"Area","title":"Area","text":"","category":"section"},{"location":"examples/area/","page":"Area","title":"Area","text":"using PlotlyJS","category":"page"},{"location":"examples/area/","page":"Area","title":"Area","text":"function area1()\n    trace1 = scatter(;x=1:4, y=[0, 2, 3, 5], fill=\"tozeroy\")\n    trace2 = scatter(;x=1:4, y=[3, 5, 1, 7], fill=\"tonexty\")\n    plot([trace1, trace2])\nend\narea1()","category":"page"},{"location":"examples/area/","page":"Area","title":"Area","text":"function area2()\n    function _stacked_area!(traces)\n        for (i, tr) in enumerate(traces[2:end])\n            for j in 1:min(length(traces[i][\"y\"]), length(tr[\"y\"]))\n                tr[\"y\"][j] += traces[i][\"y\"][j]\n            end\n        end\n        traces\n    end\n\n    traces = [scatter(;x=1:3, y=[2, 1, 4], fill=\"tozeroy\"),\n              scatter(;x=1:3, y=[1, 1, 2], fill=\"tonexty\"),\n              scatter(;x=1:3, y=[3, 0, 2], fill=\"tonexty\")]\n    _stacked_area!(traces)\n\n    plot(traces, Layout(title=\"stacked and filled line chart\"))\nend\narea2()","category":"page"},{"location":"examples/area/","page":"Area","title":"Area","text":"function area3()\n    trace1 = scatter(;x=1:4, y=[0, 2, 3, 5], fill=\"tozeroy\", mode=\"none\")\n    trace2 = scatter(;x=1:4, y=[3, 5, 1, 7], fill=\"tonexty\", mode=\"none\")\n    plot([trace1, trace2],\n         Layout(title=\"Overlaid Chart Without Boundary Lines\"))\nend\narea3()","category":"page"},{"location":"examples/3d/#D","page":"3d","title":"3D","text":"","category":"section"},{"location":"examples/3d/","page":"3d","title":"3d","text":"using PlotlyJS, DataFrames, RDatasets, Colors, Distributions, LinearAlgebra","category":"page"},{"location":"examples/3d/","page":"3d","title":"3d","text":"function random_line()\n    n = 400\n    rw() = cumsum(randn(n))\n    trace1 = scatter3d(;x=rw(),y=rw(), z=rw(), mode=\"lines\",\n                        marker=attr(color=\"#1f77b4\", size=12, symbol=\"circle\",\n                                    line=attr(color=\"rgb(0,0,0)\", width=0)),\n                        line=attr(color=\"#1f77b4\", width=1))\n    trace2 = scatter3d(;x=rw(),y=rw(), z=rw(), mode=\"lines\",\n                        marker=attr(color=\"#9467bd\", size=12, symbol=\"circle\",\n                                    line=attr(color=\"rgb(0,0,0)\", width=0)),\n                        line=attr(color=\"rgb(44, 160, 44)\", width=1))\n    trace3 = scatter3d(;x=rw(),y=rw(), z=rw(), mode=\"lines\",\n                        marker=attr(color=\"#bcbd22\", size=12, symbol=\"circle\",\n                                    line=attr(color=\"rgb(0,0,0)\", width=0)),\n                        line=attr(color=\"#bcbd22\", width=1))\n    layout = Layout(autosize=false, width=500, height=500,\n                    margin=attr(l=0, r=0, b=0, t=65))\n    plot([trace1, trace2, trace3], layout)\nend\nrandom_line()","category":"page"},{"location":"examples/3d/","page":"3d","title":"3d","text":"function topo_surface()\n    z = Vector[[27.80985, 49.61936, 83.08067, 116.6632, 130.414, 150.7206, 220.1871,\n                156.1536, 148.6416, 203.7845, 206.0386, 107.1618, 68.36975, 45.3359,\n                49.96142, 21.89279, 17.02552, 11.74317,   14.75226, 13.6671, 5.677561,\n                3.31234, 1.156517, -0.147662],\n               [27.71966, 48.55022, 65.21374, 95.27666, 116.9964, 133.9056, 152.3412,\n                151.934, 160.1139, 179.5327, 147.6184, 170.3943, 121.8194, 52.58537,\n                33.08871, 38.40972, 44.24843, 69.5786, 4.019351, 3.050024, 3.039719,\n                2.996142, 2.967954, 1.999594],\n               [30.4267, 33.47752, 44.80953, 62.47495, 77.43523, 104.2153, 102.7393, 137.0004,\n                186.0706, 219.3173, 181.7615, 120.9154, 143.1835, 82.40501, 48.47132,\n                74.71461, 60.0909, 7.073525, 6.089851, 6.53745, 6.666096, 7.306965, 5.73684,\n                3.625628],\n               [16.66549, 30.1086, 39.96952, 44.12225, 59.57512, 77.56929, 106.8925,\n                166.5539, 175.2381, 185.2815, 154.5056, 83.0433, 62.61732, 62.33167,\n                60.55916, 55.92124, 15.17284, 8.248324, 36.68087, 61.93413, 20.26867,\n                68.58819, 46.49812, 0.2360095],\n               [8.815617, 18.3516, 8.658275, 27.5859, 48.62691, 60.18013, 91.3286,\n                145.7109, 116.0653, 106.2662, 68.69447, 53.10596, 37.92797, 47.95942,\n                47.42691, 69.20731, 44.95468, 29.17197, 17.91674, 16.25515, 14.65559,\n                17.26048, 31.22245, 46.71704],\n               [6.628881, 10.41339, 24.81939, 26.08952, 30.1605, 52.30802, 64.71007,\n                76.30823, 84.63686, 99.4324, 62.52132, 46.81647, 55.76606, 82.4099,\n                140.2647, 81.26501, 56.45756, 30.42164, 17.28782, 8.302431, 2.981626,\n                2.698536, 5.886086, 5.268358],\n               [21.83975, 6.63927, 18.97085, 32.89204, 43.15014, 62.86014, 104.6657,\n                130.2294, 114.8494, 106.9873, 61.89647, 55.55682, 86.80986, 89.27802,\n                122.4221, 123.9698, 109.0952, 98.41956, 77.61374, 32.49031, 14.67344,\n                7.370775, 0.03711011, 0.6423392],\n               [53.34303, 26.79797, 6.63927, 10.88787, 17.2044, 56.18116, 79.70141,\n                90.8453, 98.27675, 80.87243, 74.7931, 75.54661, 73.4373, 74.11694, 68.1749,\n                46.24076, 39.93857, 31.21653, 36.88335, 40.02525, 117.4297, 12.70328,\n                1.729771, 0],\n               [25.66785, 63.05717, 22.1414, 17.074, 41.74483, 60.27227, 81.42432, 114.444,\n                102.3234, 101.7878, 111.031, 119.2309, 114.0777, 110.5296, 59.19355,\n                42.47175, 14.63598, 6.944074, 6.944075, 27.74936, 0, 0, 0.09449376, 0.07732264],\n               [12.827, 69.20554, 46.76293, 13.96517, 33.88744, 61.82613, 84.74799,\n                121.122, 145.2741, 153.1797, 204.786, 227.9242, 236.3038, 228.3655,\n                79.34425, 25.93483, 6.944074, 6.944074, 6.944075, 7.553681, 0, 0, 0, 0],\n               [0, 68.66396, 59.0435, 33.35762, 47.45282, 57.8355, 78.91689, 107.8275,\n                168.0053, 130.9597, 212.5541, 165.8122, 210.2429, 181.1713, 189.7617,\n                137.3378, 84.65395, 8.677168, 6.956576, 8.468093, 0, 0, 0, 0],\n               [0, 95.17499, 80.03818, 59.89862, 39.58476, 50.28058, 63.81641, 80.61302,\n                66.37824, 198.7651, 244.3467, 294.2474, 264.3517, 176.4082, 60.21857,\n                77.41475, 53.16981, 56.16393, 6.949235, 7.531059, 3.780177, 0, 0, 0],\n               [0, 134.9879, 130.3696, 96.86325, 75.70494, 58.86466, 57.20374, 55.18837,\n                78.128, 108.5582, 154.3774, 319.1686, 372.8826, 275.4655, 130.2632, 54.93822,\n                25.49719, 8.047439, 8.084393, 5.115252, 5.678269, 0, 0, 0],\n               [0, 48.08919, 142.5558, 140.3777, 154.7261, 87.9361, 58.11092, 52.83869,\n                67.14822, 83.66798, 118.9242, 150.0681, 272.9709, 341.1366, 238.664, 190.2,\n                116.8943, 91.48672, 14.0157, 42.29277, 5.115252, 0, 0, 0],\n               [0, 54.1941, 146.3839, 99.48143, 96.19411, 102.9473, 76.14089, 57.7844,\n                47.0402, 64.36799, 84.23767, 162.7181, 121.3275, 213.1646, 328.482,\n                285.4489, 283.8319, 212.815, 164.549, 92.29631, 7.244015, 1.167, 0, 0],\n               [0, 6.919659, 195.1709, 132.5253, 135.2341, 89.85069, 89.45549, 60.29967,\n                50.33806, 39.17583, 59.06854, 74.52159, 84.93402, 187.1219, 123.9673,\n                103.7027, 128.986, 165.1283, 249.7054, 95.39966, 10.00284, 2.39255, 0, 0],\n               [0, 21.73871, 123.1339, 176.7414, 158.2698, 137.235, 105.3089, 86.63255, 53.11591,\n                29.03865, 30.40539, 39.04902, 49.23405, 63.27853, 111.4215, 101.1956,\n                40.00962, 59.84565, 74.51253, 17.06316, 2.435141, 2.287471, -0.0003636982, 0],\n               [0, 0, 62.04672, 136.3122, 201.7952, 168.1343, 95.2046, 58.90624, 46.94091,\n                49.27053, 37.10416, 17.97011, 30.93697, 33.39257, 44.03077, 55.64542,\n                78.22423, 14.42782, 9.954997, 7.768213, 13.0254, 21.73166, 2.156372,\n                0.5317867],\n               [0, 0, 79.62993, 139.6978, 173.167, 192.8718, 196.3499, 144.6611, 106.5424,\n                57.16653, 41.16107, 32.12764, 13.8566, 10.91772, 12.07177, 22.38254,\n                24.72105, 6.803666, 4.200841, 16.46857, 15.70744, 33.96221, 7.575688,\n                -0.04880907],\n               [0, 0, 33.2664, 57.53643, 167.2241, 196.4833, 194.7966, 182.1884, 119.6961,\n                73.02113, 48.36549, 33.74652, 26.2379, 16.3578, 6.811293, 6.63927, 6.639271,\n                8.468093, 6.194273, 3.591233, 3.81486, 8.600739, 5.21889, 0],\n               [0, 0, 29.77937, 54.97282, 144.7995, 207.4904, 165.3432, 171.4047, 174.9216,\n                100.2733, 61.46441, 50.19171, 26.08209, 17.18218, 8.468093, 6.63927,\n                6.334467, 6.334467, 5.666687, 4.272203, 0, 0, 0, 0],\n               [0, 0, 31.409, 132.7418, 185.5796, 121.8299, 185.3841, 160.6566, 116.1478,\n                118.1078, 141.7946, 65.56351, 48.84066, 23.13864, 18.12932, 10.28531,\n                6.029663, 6.044627, 5.694764, 3.739085, 3.896037, 0, 0, 0],\n               [0, 0, 19.58994, 42.30355, 96.26777, 187.1207, 179.6626, 221.3898, 154.2617,\n                142.1604, 148.5737, 67.17937, 40.69044, 39.74512, 26.10166, 14.48469,\n                8.65873, 3.896037, 3.571392, 3.896037, 3.896037, 3.896037, 1.077756, 0],\n               [0.001229679, 3.008948, 5.909858, 33.50574, 104.3341, 152.2165, 198.1988,\n                191.841, 228.7349, 168.1041, 144.2759, 110.7436, 57.65214, 42.63504,\n                27.91891, 15.41052, 8.056102, 3.90283, 3.879774, 3.936718, 3.968634,\n                0.1236256, 3.985531, -0.1835741],\n               [0, 5.626141, 7.676256, 63.16226, 45.99762, 79.56688, 227.311, 203.9287,\n                172.5618, 177.1462, 140.4554, 123.9905, 110.346, 65.12319, 34.31887,\n                24.5278, 9.561069, 3.334991, 5.590495, 5.487353, 5.909499, 5.868994,\n                5.833817, 3.568177]]\n    trace = surface(z=z)\n    layout = Layout(title=\"Mt. Bruno Elevation\", autosize=false, width=500,\n                    height=500, margin=attr(l=65, r=50, b=65, t=90))\n    plot(trace, layout)\nend\ntopo_surface()","category":"page"},{"location":"examples/3d/","page":"3d","title":"3d","text":"function multiple_surface()\n    z1 = Vector[[8.83, 8.89, 8.81, 8.87, 8.9, 8.87],\n                [8.89, 8.94, 8.85, 8.94, 8.96, 8.92],\n                [8.84, 8.9, 8.82, 8.92, 8.93, 8.91],\n                [8.79, 8.85, 8.79, 8.9, 8.94, 8.92],\n                [8.79, 8.88, 8.81, 8.9, 8.95, 8.92],\n                [8.8, 8.82, 8.78, 8.91, 8.94, 8.92],\n                [8.75, 8.78, 8.77, 8.91, 8.95, 8.92],\n                [8.8, 8.8, 8.77, 8.91, 8.95, 8.94],\n                [8.74, 8.81, 8.76, 8.93, 8.98, 8.99],\n                [8.89, 8.99, 8.92, 9.1, 9.13, 9.11],\n                [8.97, 8.97, 8.91, 9.09, 9.11, 9.11],\n                [9.04, 9.08, 9.05, 9.25, 9.28, 9.27],\n                [9, 9.01, 9, 9.2, 9.23, 9.2],\n                [8.99, 8.99, 8.98, 9.18, 9.2, 9.19],\n                [8.93, 8.97, 8.97, 9.18, 9.2, 9.18]]\n    z2 = map(x->x.+1, z1)\n    z3 = map(x->x.-1, z1)\n    trace1 = surface(z=z1, colorscale=\"Viridis\")\n    trace2 = surface(z=z2, showscale=false, opacity=0.9, colorscale=\"Viridis\")\n    trace3 = surface(z=z3, showscale=false, opacity=0.9, colorscale=\"Viridis\")\n    plot([trace1, trace2, trace3])\nend\nmultiple_surface()","category":"page"},{"location":"examples/3d/","page":"3d","title":"3d","text":"function clustering_alpha_shapes()\n    # load data\n    iris = dataset(\"datasets\", \"iris\")\n    nms = unique(iris[:Species])\n    colors = [RGB(0.89, 0.1, 0.1), RGB(0.21, 0.50, 0.72), RGB(0.28, 0.68, 0.3)]\n\n    data = GenericTrace[]\n\n    for (i, nm) in enumerate(nms)\n        df = iris[iris[:Species] .== nm, :]\n        x=df[:SepalLength]\n        y=df[:SepalWidth]\n        z=df[:PetalLength]\n        trace = scatter3d(;name=nm, mode=\"markers\",\n                           marker_size=3, marker_color=colors[i], marker_line_width=0,\n                           x=x, y=y, z=z)\n        push!(data, trace)\n\n        cluster = mesh3d(;color=colors[i], opacity=0.3, x=x, y=y, z=z)\n        push!(data, cluster)\n    end\n\n    # notice the nested attrs to create complex JSON objects\n    layout = Layout(width=800, height=550, autosize=false, title=\"Iris dataset\",\n                    scene=attr(xaxis=attr(gridcolor=\"rgb(255, 255, 255)\",\n                                          zerolinecolor=\"rgb(255, 255, 255)\",\n                                          showbackground=true,\n                                          backgroundcolor=\"rgb(230, 230,230)\"),\n                               yaxis=attr(gridcolor=\"rgb(255, 255, 255)\",\n                                           zerolinecolor=\"rgb(255, 255, 255)\",\n                                           showbackground=true,\n                                           backgroundcolor=\"rgb(230, 230,230)\"),\n                               zaxis=attr(gridcolor=\"rgb(255, 255, 255)\",\n                                           zerolinecolor=\"rgb(255, 255, 255)\",\n                                           showbackground=true,\n                                           backgroundcolor=\"rgb(230, 230,230)\"),\n                               aspectratio=attr(x=1, y=1, z=0.7),\n                               aspectmode = \"manual\"))\n    plot(data, layout)\nend\nclustering_alpha_shapes()","category":"page"},{"location":"examples/3d/","page":"3d","title":"3d","text":"function scatter_3d()\n    Σ = fill(0.5, 3, 3) + Diagonal([0.5, 0.5, 0.5])\n    obs1 = rand(MvNormal(zeros(3), Σ), 200)'\n    obs2 = rand(MvNormal(zeros(3), 0.5Σ), 100)'\n\n    trace1 = scatter3d(;x=obs1[:, 1], y=obs1[:, 2], z=obs1[:, 3],\n                        mode=\"markers\", opacity=0.8,\n                        marker_size=12, marker_line_width=0.5,\n                        marker_line_color=\"rgba(217, 217, 217, 0.14)\")\n\n    trace2 = scatter3d(;x=obs2[:, 1], y=obs2[:, 2], z=obs2[:, 3],\n                        mode=\"markers\", opacity=0.9,\n                        marker=attr(color=\"rgb(127, 127, 127)\",\n                                    symbol=\"circle\", line_width=1.0,\n                                    line_color=\"rgb(204, 204, 204)\"))\n\n    layout = Layout(margin=attr(l=0, r=0, t=0, b=0))\n\n    plot([trace1, trace2], layout)\nend\nscatter_3d()","category":"page"},{"location":"examples/3d/","page":"3d","title":"3d","text":"function trisurf()\n    facecolor = repeat([\n    \t\"rgb(50, 200, 200)\",\n    \t\"rgb(100, 200, 255)\",\n    \t\"rgb(150, 200, 115)\",\n    \t\"rgb(200, 200, 50)\",\n    \t\"rgb(230, 200, 10)\",\n    \t\"rgb(255, 140, 0)\"\n    ], inner=[2])\n\n    t = mesh3d(\n        x=[0, 0, 1, 1, 0, 0, 1, 1],\n        y=[0, 1, 1, 0, 0, 1, 1, 0],\n        z=[0, 0, 0, 0, 1, 1, 1, 1],\n        i=[7, 0, 0, 0, 4, 4, 2, 6, 4, 0, 3, 7],\n        j=[3, 4, 1, 2, 5, 6, 5, 5, 0, 1, 2, 2],\n        k=[0, 7, 2, 3, 6, 7, 1, 2, 5, 5, 7, 6],\n        facecolor=facecolor)\n\n    plot(t)\nend\ntrisurf()","category":"page"},{"location":"examples/3d/","page":"3d","title":"3d","text":"function meshcube()\n    t = mesh3d(\n        x=[0, 0, 1, 1, 0, 0, 1, 1],\n        y=[0, 1, 1, 0, 0, 1, 1, 0],\n        z=[0, 0, 0, 0, 1, 1, 1, 1],\n        i=[7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2],\n        j=[3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3],\n        k=[0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6],\n        intensity=range(0, stop=1, length=8),\n        colorscale=[\n            [0, \"rgb(255, 0, 255)\"],\n            [0.5, \"rgb(0, 255, 0)\"],\n            [1, \"rgb(0, 0, 255)\"]\n        ]\n    )\n    plot(t)\nend\nmeshcube()","category":"page"},{"location":"#PlotlyJS","page":"Home","title":"PlotlyJS","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for PlotlyJS.jl, a Julia interface to the [plotly.js][_plotlyjs] visualization library.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package does not interact with the Plotly web API, but rather leverages the underlying javascript library to construct plotly graphics using all local resources. This means you do not need a Plotly account or an internet connection to use this package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The goals of PlotlyJS.jl are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Make it convenient to construct and manipulate plotly visualizations\nProvide infrastructure for viewing plots on multiple frontends and saving","category":"page"},{"location":"","page":"Home","title":"Home","text":"plotly graphics to files","category":"page"},{"location":"","page":"Home","title":"Home","text":"[plotlyjs]: https://plot.ly/javascript [plotlyref]: https://plotly.com/javascriptreference","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install PlotlyJS.jl, open up a Julia REPL, press ] to enter package mode and type:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(v1.0) pkg> add PlotlyJS","category":"page"},{"location":"","page":"Home","title":"Home","text":"For existing users you can run up from the package manager REPL mode to get the latest release. If after doing this plots do not show up in your chosen frontend, please run build PlotlyJS (again from pkg REPL mode) to tell Julia to download the latest release of the plotly.js javascript library.","category":"page"},{"location":"#Saving-figures","page":"Home","title":"Saving figures","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PlotlyJS.jl comes with built-in support for saving figures to files via the integration between PlotlyBase.jl (a dependency of PlotlyJS.jl) and Plotly's kaleido tool.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See exporting figures for more information.","category":"page"},{"location":"#Plots.jl","page":"Home","title":"Plots.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you would like to have a more exhaustive set of top-level functions for constructing plots, see the Plots.jl package. This package is the plotlyjs Plots.jl backend and is fully supported by Plots.","category":"page"},{"location":"examples/violin/#Violin","page":"Violin","title":"Violin","text":"","category":"section"},{"location":"examples/violin/","page":"Violin","title":"Violin","text":"using PlotlyJS, RDatasets, DataFrames","category":"page"},{"location":"examples/violin/","page":"Violin","title":"Violin","text":"function violin_box_overlay()\n    y = abs.(100 .* randn(300))\n    data = [\n        violin(x0=\"sample 1\", name=\"violin\", y=y, points=\"all\"),\n        box(x0=\"sample 1\", name=\"box\", y=y, boxpoints=false)\n    ]\n    plot(data, Layout(legend=attr(x=0.95, xanchor=\"right\")))\nend\nviolin_box_overlay()","category":"page"},{"location":"examples/violin/","page":"Violin","title":"Violin","text":"function violin_grouped()\n    days = repeat([\"day 1\", \"day 2\"], inner=5)\n    y_kale = [0.2, 0.2, 0.6, 1, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3]\n    y_radish = [0.6, 0.7, 0.3, 0.6, 0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2]\n    y_carrot = [0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1, 0.3, 0.6, 0.8, 0.5]\n    colors = [\"#3D9970\", \"#FF4136\", \"#FF851B\"]\n    names = [\"kale\", \"radishes\", \"carrots\"]\n    ys = (y_kale, y_radish, y_carrot)\n\n    data = [\n        violin(\n            y=y, name=name, x=days, span=[0, nothing], jitter=0, points=\"all\",\n            marker=attr(symbol=\"line-ew\", color=color, line=attr(color=color, width=2))\n        ) for (y, name, color) in zip(ys, names, colors)\n    ]\n    layout = Layout(\n        yaxis=attr(zeroline=false, title=\"normalized moisture\"),\n        violinmode=\"group\"\n    )\n    plot(data, layout)\nend\nviolin_grouped()","category":"page"},{"location":"examples/violin/","page":"Violin","title":"Violin","text":"function violin_nonlinear()\n    p1 = plot(\n        violin(\n            x=[\"1798-01-01\", \"1798-04-04\", \"1798-05-05\",\n               \"1798-05-05\", \"1798-07-05\", \"1798-07-22\", \"1799-01-01\"],\n            orientation=\"h\", box_visible=true, xcalendar=\"discworld\",\n            name=\"discworld dates\"\n       )\n    )\n    p2 = plot(\n        violin(\n            x=[\"A\", \"B\", \"C\", \"C\", \"C\", \"D\", \"G\"],\n            orientation=\"h\", box_visible=true, xcalendar=\"discworld\",\n            name=\"categories\"\n       ), Layout(xaxis_categoryarray='A':'G')\n    )\n    p = [p1; p2]\n    relayout!(p, showlegend=false, margin_l=100)\n    p\nend\nviolin_nonlinear()","category":"page"},{"location":"examples/violin/","page":"Violin","title":"Violin","text":"function violin_old_faithful()\n    y = [79, 54, 74, 62, 85, 55, 88, 85, 51, 85, 54, 84, 78, 47, 83, 52, 62,\n    84, 52, 79, 51, 47, 78, 69, 74, 83, 55, 76, 78, 79, 73, 77, 66, 80, 74, 52,\n    48, 80, 59, 90, 80, 58, 84, 58, 73, 83, 64, 53, 82, 59, 75, 90, 54, 80, 54,\n    83, 71, 64, 77, 81, 59, 84, 48, 82, 60, 92, 78, 78, 65, 73, 82, 56, 79, 71,\n    62, 76, 60, 78, 76, 83, 75, 82, 70, 65, 73, 88, 76, 80, 48, 86, 60, 90, 50,\n    78, 63, 72, 84, 75, 51, 82, 62, 88, 49, 83, 81, 47, 84, 52, 86, 81, 75, 59,\n    89, 79, 59, 81, 50, 85, 59, 87, 53, 69, 77, 56, 88, 81, 45, 82, 55, 90, 45,\n    83, 56, 89, 46, 82, 51, 86, 53, 79, 81, 60, 82, 77, 76, 59, 80, 49, 96, 53,\n    77, 77, 65, 81, 71, 70, 81, 93, 53, 89, 45, 86, 58, 78, 66, 76, 63, 88, 52,\n    93, 49, 57, 77, 68, 81, 81, 73, 50, 85, 74, 55, 77, 83, 83, 51, 78, 84, 46,\n    83, 55, 81, 57, 76, 84, 77, 81, 87, 77, 51, 78, 60, 82, 91, 53, 78, 46, 77,\n    84, 49, 83, 71, 80, 49, 75, 64, 76, 53, 94, 55, 76, 50, 82, 54, 75, 78, 79,\n    78, 78, 70, 79, 70, 54, 86, 50, 90, 54, 54, 77, 79, 64, 75, 47, 86, 63, 85,\n    82, 57, 82, 67, 74, 54, 83, 73, 73, 88, 80, 71, 83, 56, 79, 78, 84, 58, 83,\n    43, 60, 75, 81, 46, 90, 46, 74]\n    plot(violin(y=y, points=\"all\", name=\"Old Faithful\", meanline_visible=true))\nend\nviolin_old_faithful()","category":"page"},{"location":"examples/violin/","page":"Violin","title":"Violin","text":"function violin_side_by_side()\n    # requires RDatasets and DataFrames\n    tips = dataset(\"reshape2\", \"tips\")\n    parts = zip(\n        (\"Female\", \"Male\"),\n        (\"positive\", \"negative\"),\n        (\"#bebada\", \"#8dd3c7\"),\n        (1.0, -0.6)\n    )\n    traces = GenericTrace[]\n    for (sex, side, color, pointpos) in parts\n        sub_tips = tips[tips[:Sex] .== sex, :]\n        sub_traces = violin(sub_tips,\n            group=:Day,\n            x=:TotalBill, y0=(df) -> df[1, :Day],\n            side=side, orientation=\"h\",\n            marker=attr(line=attr(width=2, color=color), symbol=\"line-ns\"),\n            line_color=color,\n            hoveron=\"points+kde\", text=(df) -> \"Sample length $(size(df, 1))\",\n            scalemode=\"count\", scalegroup=sex, legendgroup=sex, name=sex,\n            points=\"all\", jitter=0, pointpos=pointpos,\n            span=[0],\n            box_visible=true, meanline_visible=true,\n            showlegend=false,\n        )\n        sub_traces[1][:showlegend] = true\n        append!(traces, sub_traces)\n    end\n    # TODO: make the layout\n    layout = Layout(\n        hovermode=\"closest\", violinmode=\"overlay\",\n        title=\"Total bill distribution<br><i>scaled by number of bills per gender\",\n        legend_tracegroupgap=0, violingap=0, violingroupgap=0,\n        yaxis=attr(showgrid=true, categoryarray=[\"Thur\", \"Fri\", \"Sat\", \"Sun\"]),\n    )\n    plot(traces, layout)\nend\nviolin_side_by_side()","category":"page"},{"location":"examples/violin/","page":"Violin","title":"Violin","text":"function violin_style()\n    y1 = vcat(abs.(20 .* rand(100)), rand(UInt16, 300) .* 500 ./ typemax(UInt16))\n    y2 = [25.261999999999997, 66.5419, 98.2114, 0.09070629 ]\n    box = attr(fillcolor=\"black\", line_color=\"black\", width=0.01)\n    span = [0, nothing]\n    trace1 = violin(\n        bandwidth=5, points=false, y=y1, name=\"Radial Velocity\",\n        span=span, line_color=\"#67353E\", box=box\n    )\n    trace2 = violin(\n        bandwidth=5, points=false, y=y2, name=\"Pulsar Timing\",\n        span=span, line_color=\"#34ABA2\", box=box\n    )\n\n    layout = Layout(\n        paper_bgcolor=\"#d3d3d3\", plot_bgcolor=\"#d3d3d3\",\n        showlegend=false, violingap=0, xaxis_side=\"top\",\n        yaxis=attr(\n            showline=false, showticklabels=false, range=(-5, 550),\n            zeroline=false, visible=false, showgrid=false,\n        ),\n        annotations=[attr(\n            text=\"Orbital Period Estimations\", font_size=20,\n            xref=\"paper\", yref=\"paper\", showarrow=false,\n        )]\n    )\n    plot([trace1, trace2], layout)\nend\nviolin_style()","category":"page"},{"location":"examples/tables/#Tables","page":"Tables","title":"Tables","text":"","category":"section"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"using PlotlyJS, DataFrames, CSV","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"function table1()\n    values = [\n        \"Salaries\" 1200000 1300000 1300000 1400000\n        \"Office\" 20000 20000 20000 20000\n        \"Merchandise\" 80000 70000 120000 90000\n        \"Legal\" 2000 2000 2000 2000\n        \"TOTAL\" 12120000 130902000 131222000 14102000\n    ]\n\n    trace = table(\n        header=attr(\n            values=[\"Expenses\", \"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n            align=\"center\", line=attr(width=1, color=\"black\"),\n            fill_color=\"grey\", font=attr(family=\"Arial\", size=12, color=\"white\")\n        ),\n        cells=attr(\n            values=values, align=\"center\", line=attr(color=\"black\", width=1),\n            font=attr(family=\"Arial\", size=11, color=\"black\")\n        )\n    )\n    plot(trace)\n\nend\ntable1()","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"function table2()\n    values = [\n        \"Salaries\" 1200000 1300000 1300000 1400000\n        \"Office\" 20000 20000 20000 20000\n        \"Merchandise\" 80000 70000 120000 90000\n        \"Legal\" 2000 2000 2000 2000\n        \"TOTAL\" 12120000 130902000 131222000 14102000\n    ]\n\n    trace = table(\n        header=attr(\n            values=[\"EXPENSES\", \"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n            align=[\"left\", \"center\"], line=attr(width=1, color=\"#506784\"),\n            fill_color=\"#119DFF\",\n            font=attr(family=\"Arial\", size=12, color=\"white\")\n        ),\n        cells=attr(\n            values=values, align=[\"left\", \"center\"],\n            line=attr(color=\"#506784\", width=1),\n            font=attr(family=\"Arial\", size=11, color=\"#506784\"),\n            fill_color=[\"#25FEFD\", \"white\"]\n        )\n    )\n    plot(trace)\n\nend\ntable2()","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"function table2a()\n    p1 = table1()\n    restyle!(p1,\n        header=attr(\n            align=[\"left\", \"center\"], line_color=\"#506784\", fill_color=\"#119DFF\"\n        ),\n        cells=attr(\n            align=[\"left\", \"center\"], line_color=\"#506784\",\n            fill_color=[\"#25FEFD\", \"white\"], font_color=\"#506784\"\n        )\n    )\n    p1\nend\ntable2a()","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"function table3()\n    nm = tempname()\n    url = \"https://raw.githubusercontent.com/plotly/datasets/master/Mining-BTC-180.csv\"\n    download(url, nm)\n    df = CSV.read(nm)\n    rm(nm)\n\n    data = Array(df)\n\n    trace = table(\n        columnwidth=[200, 500, 600, 600, 400, 400, 600, 600, 600],\n        # columnorder=0:9,\n        header=attr(\n            values=map(x-> replace(string(x), '_' => '-'), names(df)),\n            align=\"center\",\n            line=attr(width=1, color=\"rgb(50, 50, 50)\"),\n            fill_color=[\"rgb(235, 100, 230)\"],\n            font=attr(family=\"Arial\", size=12, color=\"white\")\n        ),\n        cells=attr(\n            values=Array(df),\n            align=[\"center\", \"center\"],\n            line=attr(width=1, color=\"black\"),\n            fill_color=[\"rgba(228, 222, 249, 0.65)\", \"rgb(235, 193, 238)\", \"rgba(228, 222, 249, 0.65)\"],\n            font=attr(family=\"Arial\", size=10, color=\"black\")\n        )\n    )\n\n    layout = Layout(\n        title=\"Bitcoin mining stats for 180 days\",\n        width=1200\n    )\n    plot(trace, layout)\nend\ntable3()","category":"page"}]
}
